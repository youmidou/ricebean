// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.23.1
// source: Net_Match3.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 子游戏Id
type Match3Game int32

const (
	Match3Game_GameIdle  Match3Game = 0     //空置占位没用
	Match3Game_Game10101 Match3Game = 10101 //人机1v1 PVE火龙宝藏
	Match3Game_Game10201 Match3Game = 10201 //真人1v1
	Match3Game_Game10202 Match3Game = 10202 //无限火力
	Match3Game_Game10301 Match3Game = 10301 //真人4人混战
	Match3Game_Game10401 Match3Game = 10401 //金币房间 初级
	Match3Game_Game10402 Match3Game = 10402 //金币房间 中级
	Match3Game_Game10403 Match3Game = 10403 //金币房间 高级
	Match3Game_Game10404 Match3Game = 10404 //金币房间 顶级
	Match3Game_Game10501 Match3Game = 10501 //2人回合制房间
)

// Enum value maps for Match3Game.
var (
	Match3Game_name = map[int32]string{
		0:     "GameIdle",
		10101: "Game10101",
		10201: "Game10201",
		10202: "Game10202",
		10301: "Game10301",
		10401: "Game10401",
		10402: "Game10402",
		10403: "Game10403",
		10404: "Game10404",
		10501: "Game10501",
	}
	Match3Game_value = map[string]int32{
		"GameIdle":  0,
		"Game10101": 10101,
		"Game10201": 10201,
		"Game10202": 10202,
		"Game10301": 10301,
		"Game10401": 10401,
		"Game10402": 10402,
		"Game10403": 10403,
		"Game10404": 10404,
		"Game10501": 10501,
	}
)

func (x Match3Game) Enum() *Match3Game {
	p := new(Match3Game)
	*p = x
	return p
}

func (x Match3Game) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Match3Game) Descriptor() protoreflect.EnumDescriptor {
	return file_Net_Match3_proto_enumTypes[0].Descriptor()
}

func (Match3Game) Type() protoreflect.EnumType {
	return &file_Net_Match3_proto_enumTypes[0]
}

func (x Match3Game) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Match3Game.Descriptor instead.
func (Match3Game) EnumDescriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{0}
}

// 主题信息
type Base_Match3_Match3Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 英雄卡牌信息
	RoomInfo *Base_Match3_RoomInfo `protobuf:"bytes,1,opt,name=RoomInfo,proto3" json:"RoomInfo,omitempty"` //房间信息
}

func (x *Base_Match3_Match3Info) Reset() {
	*x = Base_Match3_Match3Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Match3_Match3Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Match3_Match3Info) ProtoMessage() {}

func (x *Base_Match3_Match3Info) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Match3_Match3Info.ProtoReflect.Descriptor instead.
func (*Base_Match3_Match3Info) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{0}
}

func (x *Base_Match3_Match3Info) GetRoomInfo() *Base_Match3_RoomInfo {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

// 房间信息
type Base_Match3_RoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId            int32                           `protobuf:"varint,1,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                                                                                             //房间号
	RoomTypeId        int32                           `protobuf:"varint,2,opt,name=RoomTypeId,proto3" json:"RoomTypeId,omitempty"`                                                                                     //房间类型
	RoomStatus        int32                           `protobuf:"varint,3,opt,name=RoomStatus,proto3" json:"RoomStatus,omitempty"`                                                                                     //房间状态 0:闲置,1:匹配中;2:开始;3:结束;
	CurrentServerTime int64                           `protobuf:"varint,4,opt,name=CurrentServerTime,proto3" json:"CurrentServerTime,omitempty"`                                                                       //当前服务器时间
	StartTime         int64                           `protobuf:"varint,5,opt,name=StartTime,proto3" json:"StartTime,omitempty"`                                                                                       //倒计时结束时间 也是开始时间
	EndTime           int64                           `protobuf:"varint,6,opt,name=EndTime,proto3" json:"EndTime,omitempty"`                                                                                           //服务器结束时间
	CountdownNum      int32                           `protobuf:"varint,7,opt,name=CountdownNum,proto3" json:"CountdownNum,omitempty"`                                                                                 //0:开始 大于0倒计时中
	ChairMaxNum       int32                           `protobuf:"varint,8,opt,name=ChairMaxNum,proto3" json:"ChairMaxNum,omitempty"`                                                                                   //房间最大上限人数
	RoleList          map[int32]*Base_Match3_RoleInfo `protobuf:"bytes,9,rep,name=RoleList,proto3" json:"RoleList,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //角色信息列表
}

func (x *Base_Match3_RoomInfo) Reset() {
	*x = Base_Match3_RoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Match3_RoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Match3_RoomInfo) ProtoMessage() {}

func (x *Base_Match3_RoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Match3_RoomInfo.ProtoReflect.Descriptor instead.
func (*Base_Match3_RoomInfo) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{1}
}

func (x *Base_Match3_RoomInfo) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *Base_Match3_RoomInfo) GetRoomTypeId() int32 {
	if x != nil {
		return x.RoomTypeId
	}
	return 0
}

func (x *Base_Match3_RoomInfo) GetRoomStatus() int32 {
	if x != nil {
		return x.RoomStatus
	}
	return 0
}

func (x *Base_Match3_RoomInfo) GetCurrentServerTime() int64 {
	if x != nil {
		return x.CurrentServerTime
	}
	return 0
}

func (x *Base_Match3_RoomInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Base_Match3_RoomInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Base_Match3_RoomInfo) GetCountdownNum() int32 {
	if x != nil {
		return x.CountdownNum
	}
	return 0
}

func (x *Base_Match3_RoomInfo) GetChairMaxNum() int32 {
	if x != nil {
		return x.ChairMaxNum
	}
	return 0
}

func (x *Base_Match3_RoomInfo) GetRoleList() map[int32]*Base_Match3_RoleInfo {
	if x != nil {
		return x.RoleList
	}
	return nil
}

// 一组棋子
type Base_Match3_SetChesses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeChesses map[int32]*Base_Match3_Chess `protobuf:"bytes,1,rep,name=ChangeChesses,proto3" json:"ChangeChesses,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //一组棋子信息，key是位置，value是数据
}

func (x *Base_Match3_SetChesses) Reset() {
	*x = Base_Match3_SetChesses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Match3_SetChesses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Match3_SetChesses) ProtoMessage() {}

func (x *Base_Match3_SetChesses) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Match3_SetChesses.ProtoReflect.Descriptor instead.
func (*Base_Match3_SetChesses) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{2}
}

func (x *Base_Match3_SetChesses) GetChangeChesses() map[int32]*Base_Match3_Chess {
	if x != nil {
		return x.ChangeChesses
	}
	return nil
}

// 棋盘信息
type Base_Match3_ChessboardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoveType            int32                                `protobuf:"varint,1,opt,name=MoveType,proto3" json:"MoveType,omitempty"`                                                                                                       //操作类型：1，移动；2，点击
	BeginPos            int32                                `protobuf:"varint,2,opt,name=BeginPos,proto3" json:"BeginPos,omitempty"`                                                                                                       //起始位
	EndPos              int32                                `protobuf:"varint,3,opt,name=EndPos,proto3" json:"EndPos,omitempty"`                                                                                                           //目标位
	SkillId             int32                                `protobuf:"varint,4,opt,name=SkillId,proto3" json:"SkillId,omitempty"`                                                                                                         //技能id
	FirstEliminated     map[int32]*Base_Match3_RepeatInt     `protobuf:"bytes,5,rep,name=FirstEliminated,proto3" json:"FirstEliminated,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //行动所消除掉的珠子
	NextEliminated      map[int32]*Base_Match3_RepeatInt     `protobuf:"bytes,6,rep,name=NextEliminated,proto3" json:"NextEliminated,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`   //行动消除掉的珠子中有特殊棋子消除的后续消除
	SupplyChesses       map[int32]*Base_Match3_SupplyChesses `protobuf:"bytes,7,rep,name=SupplyChesses,proto3" json:"SupplyChesses,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`     //行动之后补充的所有棋子
	ChessGrid           map[int32]*Base_Match3_Chess         `protobuf:"bytes,8,rep,name=ChessGrid,proto3" json:"ChessGrid,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`             //棋盘数据
	ChangeChesses       map[int32]*Base_Match3_Chess         `protobuf:"bytes,9,rep,name=ChangeChesses,proto3" json:"ChangeChesses,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TargetChangeChesses map[int32]*Base_Match3_SetChesses    `protobuf:"bytes,10,rep,name=TargetChangeChesses,proto3" json:"TargetChangeChesses,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //目标的棋子变化,key椅子号，value变化棋子//某些技能效果是棋子变化
}

func (x *Base_Match3_ChessboardInfo) Reset() {
	*x = Base_Match3_ChessboardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Match3_ChessboardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Match3_ChessboardInfo) ProtoMessage() {}

func (x *Base_Match3_ChessboardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Match3_ChessboardInfo.ProtoReflect.Descriptor instead.
func (*Base_Match3_ChessboardInfo) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{3}
}

func (x *Base_Match3_ChessboardInfo) GetMoveType() int32 {
	if x != nil {
		return x.MoveType
	}
	return 0
}

func (x *Base_Match3_ChessboardInfo) GetBeginPos() int32 {
	if x != nil {
		return x.BeginPos
	}
	return 0
}

func (x *Base_Match3_ChessboardInfo) GetEndPos() int32 {
	if x != nil {
		return x.EndPos
	}
	return 0
}

func (x *Base_Match3_ChessboardInfo) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *Base_Match3_ChessboardInfo) GetFirstEliminated() map[int32]*Base_Match3_RepeatInt {
	if x != nil {
		return x.FirstEliminated
	}
	return nil
}

func (x *Base_Match3_ChessboardInfo) GetNextEliminated() map[int32]*Base_Match3_RepeatInt {
	if x != nil {
		return x.NextEliminated
	}
	return nil
}

func (x *Base_Match3_ChessboardInfo) GetSupplyChesses() map[int32]*Base_Match3_SupplyChesses {
	if x != nil {
		return x.SupplyChesses
	}
	return nil
}

func (x *Base_Match3_ChessboardInfo) GetChessGrid() map[int32]*Base_Match3_Chess {
	if x != nil {
		return x.ChessGrid
	}
	return nil
}

func (x *Base_Match3_ChessboardInfo) GetChangeChesses() map[int32]*Base_Match3_Chess {
	if x != nil {
		return x.ChangeChesses
	}
	return nil
}

func (x *Base_Match3_ChessboardInfo) GetTargetChangeChesses() map[int32]*Base_Match3_SetChesses {
	if x != nil {
		return x.TargetChangeChesses
	}
	return nil
}

// 英雄信息
type Base_Match3_HeroInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`       //英雄Id
	Name  string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`    //昵称
	Level int32  `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"` //等级
	// -------属性信息------------------------
	Hp           int32 `protobuf:"varint,4,opt,name=Hp,proto3" json:"Hp,omitempty"`                     //血条值
	HpLimit      int32 `protobuf:"varint,5,opt,name=HpLimit,proto3" json:"HpLimit,omitempty"`           //血上限
	Atk          int32 `protobuf:"varint,6,opt,name=Atk,proto3" json:"Atk,omitempty"`                   //攻击值
	Step         int32 `protobuf:"varint,7,opt,name=Step,proto3" json:"Step,omitempty"`                 //步数
	RecoveryTime int32 `protobuf:"varint,8,opt,name=RecoveryTime,proto3" json:"RecoveryTime,omitempty"` //步数恢复时间 秒
	// -------------------------------
	HeadIconId int32  `protobuf:"varint,9,opt,name=HeadIconId,proto3" json:"HeadIconId,omitempty"` //头像Id
	Quality    int32  `protobuf:"varint,10,opt,name=Quality,proto3" json:"Quality,omitempty"`      //品质
	Detect     string `protobuf:"bytes,11,opt,name=Detect,proto3" json:"Detect,omitempty"`         //伤害范围
	Skill      string `protobuf:"bytes,12,opt,name=Skill,proto3" json:"Skill,omitempty"`           //伤害技能
	Buy        int32  `protobuf:"varint,13,opt,name=Buy,proto3" json:"Buy,omitempty"`              //购买金币
}

func (x *Base_Match3_HeroInfo) Reset() {
	*x = Base_Match3_HeroInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Match3_HeroInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Match3_HeroInfo) ProtoMessage() {}

func (x *Base_Match3_HeroInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Match3_HeroInfo.ProtoReflect.Descriptor instead.
func (*Base_Match3_HeroInfo) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{4}
}

func (x *Base_Match3_HeroInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Base_Match3_HeroInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Base_Match3_HeroInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Base_Match3_HeroInfo) GetHp() int32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *Base_Match3_HeroInfo) GetHpLimit() int32 {
	if x != nil {
		return x.HpLimit
	}
	return 0
}

func (x *Base_Match3_HeroInfo) GetAtk() int32 {
	if x != nil {
		return x.Atk
	}
	return 0
}

func (x *Base_Match3_HeroInfo) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *Base_Match3_HeroInfo) GetRecoveryTime() int32 {
	if x != nil {
		return x.RecoveryTime
	}
	return 0
}

func (x *Base_Match3_HeroInfo) GetHeadIconId() int32 {
	if x != nil {
		return x.HeadIconId
	}
	return 0
}

func (x *Base_Match3_HeroInfo) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *Base_Match3_HeroInfo) GetDetect() string {
	if x != nil {
		return x.Detect
	}
	return ""
}

func (x *Base_Match3_HeroInfo) GetSkill() string {
	if x != nil {
		return x.Skill
	}
	return ""
}

func (x *Base_Match3_HeroInfo) GetBuy() int32 {
	if x != nil {
		return x.Buy
	}
	return 0
}

// 技能栏
type Base_Match3_SkillBarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChessboardSkill1 *Base_Match3_ChessboardSkillInfo `protobuf:"bytes,1,opt,name=ChessboardSkill1,proto3" json:"ChessboardSkill1,omitempty"` //第一个技能
	ChessboardSkill2 *Base_Match3_ChessboardSkillInfo `protobuf:"bytes,2,opt,name=ChessboardSkill2,proto3" json:"ChessboardSkill2,omitempty"` //第二个技能
	ChessboardSkill3 *Base_Match3_ChessboardSkillInfo `protobuf:"bytes,3,opt,name=ChessboardSkill3,proto3" json:"ChessboardSkill3,omitempty"` //第三个技能
}

func (x *Base_Match3_SkillBarInfo) Reset() {
	*x = Base_Match3_SkillBarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Match3_SkillBarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Match3_SkillBarInfo) ProtoMessage() {}

func (x *Base_Match3_SkillBarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Match3_SkillBarInfo.ProtoReflect.Descriptor instead.
func (*Base_Match3_SkillBarInfo) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{5}
}

func (x *Base_Match3_SkillBarInfo) GetChessboardSkill1() *Base_Match3_ChessboardSkillInfo {
	if x != nil {
		return x.ChessboardSkill1
	}
	return nil
}

func (x *Base_Match3_SkillBarInfo) GetChessboardSkill2() *Base_Match3_ChessboardSkillInfo {
	if x != nil {
		return x.ChessboardSkill2
	}
	return nil
}

func (x *Base_Match3_SkillBarInfo) GetChessboardSkill3() *Base_Match3_ChessboardSkillInfo {
	if x != nil {
		return x.ChessboardSkill3
	}
	return nil
}

// 一个棋盘技能
type Base_Match3_ChessboardSkillInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	ClearType     int32  `protobuf:"varint,4,opt,name=ClearType,proto3" json:"ClearType,omitempty"`
	Point         int32  `protobuf:"varint,5,opt,name=Point,proto3" json:"Point,omitempty"`
	ActiveColor   int32  `protobuf:"varint,6,opt,name=ActiveColor,proto3" json:"ActiveColor,omitempty"`
	ActiveNum     int32  `protobuf:"varint,7,opt,name=ActiveNum,proto3" json:"ActiveNum,omitempty"`
	BoardSkillIId int32  `protobuf:"varint,8,opt,name=BoardSkillIId,proto3" json:"BoardSkillIId,omitempty"`
	SkillIcon     string `protobuf:"bytes,9,opt,name=SkillIcon,proto3" json:"SkillIcon,omitempty"`
	BottomFrame   string `protobuf:"bytes,10,opt,name=BottomFrame,proto3" json:"BottomFrame,omitempty"`
	EffectsKillok int32  `protobuf:"varint,11,opt,name=EffectsKillok,proto3" json:"EffectsKillok,omitempty"`
	DelayTime     int32  `protobuf:"varint,12,opt,name=DelayTime,proto3" json:"DelayTime,omitempty"`
}

func (x *Base_Match3_ChessboardSkillInfo) Reset() {
	*x = Base_Match3_ChessboardSkillInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Match3_ChessboardSkillInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Match3_ChessboardSkillInfo) ProtoMessage() {}

func (x *Base_Match3_ChessboardSkillInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Match3_ChessboardSkillInfo.ProtoReflect.Descriptor instead.
func (*Base_Match3_ChessboardSkillInfo) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{6}
}

func (x *Base_Match3_ChessboardSkillInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Base_Match3_ChessboardSkillInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Base_Match3_ChessboardSkillInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Base_Match3_ChessboardSkillInfo) GetClearType() int32 {
	if x != nil {
		return x.ClearType
	}
	return 0
}

func (x *Base_Match3_ChessboardSkillInfo) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *Base_Match3_ChessboardSkillInfo) GetActiveColor() int32 {
	if x != nil {
		return x.ActiveColor
	}
	return 0
}

func (x *Base_Match3_ChessboardSkillInfo) GetActiveNum() int32 {
	if x != nil {
		return x.ActiveNum
	}
	return 0
}

func (x *Base_Match3_ChessboardSkillInfo) GetBoardSkillIId() int32 {
	if x != nil {
		return x.BoardSkillIId
	}
	return 0
}

func (x *Base_Match3_ChessboardSkillInfo) GetSkillIcon() string {
	if x != nil {
		return x.SkillIcon
	}
	return ""
}

func (x *Base_Match3_ChessboardSkillInfo) GetBottomFrame() string {
	if x != nil {
		return x.BottomFrame
	}
	return ""
}

func (x *Base_Match3_ChessboardSkillInfo) GetEffectsKillok() int32 {
	if x != nil {
		return x.EffectsKillok
	}
	return 0
}

func (x *Base_Match3_ChessboardSkillInfo) GetDelayTime() int32 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

// 一个英雄技能
type Base_Match3_HeroSkillInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32                                     `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	HeroSkillItemList map[string]*Base_Match3_HeroSkillItemInfo `protobuf:"bytes,2,rep,name=HeroSkillItemList,proto3" json:"HeroSkillItemList,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Base_Match3_HeroSkillInfo) Reset() {
	*x = Base_Match3_HeroSkillInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Match3_HeroSkillInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Match3_HeroSkillInfo) ProtoMessage() {}

func (x *Base_Match3_HeroSkillInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Match3_HeroSkillInfo.ProtoReflect.Descriptor instead.
func (*Base_Match3_HeroSkillInfo) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{7}
}

func (x *Base_Match3_HeroSkillInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Base_Match3_HeroSkillInfo) GetHeroSkillItemList() map[string]*Base_Match3_HeroSkillItemInfo {
	if x != nil {
		return x.HeroSkillItemList
	}
	return nil
}

// 一行英雄技能效果伤害列表
type Base_Match3_HeroSkillItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	TargetType int32 `protobuf:"varint,2,opt,name=TargetType,proto3" json:"TargetType,omitempty"` //1:自己方英雄;2:敌人方英雄;3:自己方棋盘;4:敌人方棋盘;
}

func (x *Base_Match3_HeroSkillItemInfo) Reset() {
	*x = Base_Match3_HeroSkillItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Match3_HeroSkillItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Match3_HeroSkillItemInfo) ProtoMessage() {}

func (x *Base_Match3_HeroSkillItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Match3_HeroSkillItemInfo.ProtoReflect.Descriptor instead.
func (*Base_Match3_HeroSkillItemInfo) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{8}
}

func (x *Base_Match3_HeroSkillItemInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Base_Match3_HeroSkillItemInfo) GetTargetType() int32 {
	if x != nil {
		return x.TargetType
	}
	return 0
}

// 英雄攻击
type Base_Match3_HeroAttackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *Base_Match3_HeroAttackInfo) Reset() {
	*x = Base_Match3_HeroAttackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Match3_HeroAttackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Match3_HeroAttackInfo) ProtoMessage() {}

func (x *Base_Match3_HeroAttackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Match3_HeroAttackInfo.ProtoReflect.Descriptor instead.
func (*Base_Match3_HeroAttackInfo) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{9}
}

func (x *Base_Match3_HeroAttackInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 角色信息
type Base_Match3_RoleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                      `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ChairId        int32                       `protobuf:"varint,2,opt,name=ChairId,proto3" json:"ChairId,omitempty"` //椅子id
	NickName       string                      `protobuf:"bytes,3,opt,name=NickName,proto3" json:"NickName,omitempty"`
	IsOnline       bool                        `protobuf:"varint,4,opt,name=IsOnline,proto3" json:"IsOnline,omitempty"`             //是否在线
	IsAIRobot      bool                        `protobuf:"varint,5,opt,name=IsAIRobot,proto3" json:"IsAIRobot,omitempty"`           //true:机器人;false:玩家;
	BindPlayerId   string                      `protobuf:"bytes,6,opt,name=BindPlayerId,proto3" json:"BindPlayerId,omitempty"`      //如果是机器人 绑定在真人玩家Id身上
	IsOwner        bool                        `protobuf:"varint,7,opt,name=IsOwner,proto3" json:"IsOwner,omitempty"`               //是否是房主 0:成员;1:房主;
	SelectHeroId   int32                       `protobuf:"varint,8,opt,name=SelectHeroId,proto3" json:"SelectHeroId,omitempty"`     //选择英雄Id
	HeroInfo       *Base_Match3_HeroInfo       `protobuf:"bytes,9,opt,name=HeroInfo,proto3" json:"HeroInfo,omitempty"`              //英雄信息
	SkillBarInfo   *Base_Match3_SkillBarInfo   `protobuf:"bytes,10,opt,name=SkillBarInfo,proto3" json:"SkillBarInfo,omitempty"`     //技能栏
	ChessboardInfo *Base_Match3_ChessboardInfo `protobuf:"bytes,11,opt,name=ChessboardInfo,proto3" json:"ChessboardInfo,omitempty"` //棋盘信息
}

func (x *Base_Match3_RoleInfo) Reset() {
	*x = Base_Match3_RoleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Match3_RoleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Match3_RoleInfo) ProtoMessage() {}

func (x *Base_Match3_RoleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Match3_RoleInfo.ProtoReflect.Descriptor instead.
func (*Base_Match3_RoleInfo) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{10}
}

func (x *Base_Match3_RoleInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Base_Match3_RoleInfo) GetChairId() int32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *Base_Match3_RoleInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *Base_Match3_RoleInfo) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *Base_Match3_RoleInfo) GetIsAIRobot() bool {
	if x != nil {
		return x.IsAIRobot
	}
	return false
}

func (x *Base_Match3_RoleInfo) GetBindPlayerId() string {
	if x != nil {
		return x.BindPlayerId
	}
	return ""
}

func (x *Base_Match3_RoleInfo) GetIsOwner() bool {
	if x != nil {
		return x.IsOwner
	}
	return false
}

func (x *Base_Match3_RoleInfo) GetSelectHeroId() int32 {
	if x != nil {
		return x.SelectHeroId
	}
	return 0
}

func (x *Base_Match3_RoleInfo) GetHeroInfo() *Base_Match3_HeroInfo {
	if x != nil {
		return x.HeroInfo
	}
	return nil
}

func (x *Base_Match3_RoleInfo) GetSkillBarInfo() *Base_Match3_SkillBarInfo {
	if x != nil {
		return x.SkillBarInfo
	}
	return nil
}

func (x *Base_Match3_RoleInfo) GetChessboardInfo() *Base_Match3_ChessboardInfo {
	if x != nil {
		return x.ChessboardInfo
	}
	return nil
}

// Match3Chessboard
// 整型列表
type Base_Match3_RepeatInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntList []int32 `protobuf:"varint,1,rep,packed,name=IntList,proto3" json:"IntList,omitempty"` //整型List
}

func (x *Base_Match3_RepeatInt) Reset() {
	*x = Base_Match3_RepeatInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Match3_RepeatInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Match3_RepeatInt) ProtoMessage() {}

func (x *Base_Match3_RepeatInt) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Match3_RepeatInt.ProtoReflect.Descriptor instead.
func (*Base_Match3_RepeatInt) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{11}
}

func (x *Base_Match3_RepeatInt) GetIntList() []int32 {
	if x != nil {
		return x.IntList
	}
	return nil
}

// 棋子的基本信息
type Base_Match3_SimpleChess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChessColor int32 `protobuf:"varint,1,opt,name=ChessColor,proto3" json:"ChessColor,omitempty"` //棋子颜色
	SpeType    int32 `protobuf:"varint,2,opt,name=SpeType,proto3" json:"SpeType,omitempty"`       //特殊棋子类型
}

func (x *Base_Match3_SimpleChess) Reset() {
	*x = Base_Match3_SimpleChess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Match3_SimpleChess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Match3_SimpleChess) ProtoMessage() {}

func (x *Base_Match3_SimpleChess) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Match3_SimpleChess.ProtoReflect.Descriptor instead.
func (*Base_Match3_SimpleChess) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{12}
}

func (x *Base_Match3_SimpleChess) GetChessColor() int32 {
	if x != nil {
		return x.ChessColor
	}
	return 0
}

func (x *Base_Match3_SimpleChess) GetSpeType() int32 {
	if x != nil {
		return x.SpeType
	}
	return 0
}

type Base_Match3_Chess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChessId    int32 `protobuf:"varint,1,opt,name=ChessId,proto3" json:"ChessId,omitempty"`       //棋子id
	ChessColor int32 `protobuf:"varint,2,opt,name=ChessColor,proto3" json:"ChessColor,omitempty"` //棋子颜色
	SubChessId int32 `protobuf:"varint,3,opt,name=SubChessId,proto3" json:"SubChessId,omitempty"` //关联的棋子id，被冰冻的棋子，燃烧结束生成的棋子
	FrozenCnt  int32 `protobuf:"varint,4,opt,name=FrozenCnt,proto3" json:"FrozenCnt,omitempty"`   //冻结需要消除的次数
	ExpireTime int64 `protobuf:"varint,5,opt,name=ExpireTime,proto3" json:"ExpireTime,omitempty"` //棋子失效时间，针对燃烧棋子
}

func (x *Base_Match3_Chess) Reset() {
	*x = Base_Match3_Chess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Match3_Chess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Match3_Chess) ProtoMessage() {}

func (x *Base_Match3_Chess) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Match3_Chess.ProtoReflect.Descriptor instead.
func (*Base_Match3_Chess) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{13}
}

func (x *Base_Match3_Chess) GetChessId() int32 {
	if x != nil {
		return x.ChessId
	}
	return 0
}

func (x *Base_Match3_Chess) GetChessColor() int32 {
	if x != nil {
		return x.ChessColor
	}
	return 0
}

func (x *Base_Match3_Chess) GetSubChessId() int32 {
	if x != nil {
		return x.SubChessId
	}
	return 0
}

func (x *Base_Match3_Chess) GetFrozenCnt() int32 {
	if x != nil {
		return x.FrozenCnt
	}
	return 0
}

func (x *Base_Match3_Chess) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

// 单列补充棋子
type Base_Match3_SupplyChesses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupplyChesses []*Base_Match3_SimpleChess `protobuf:"bytes,1,rep,name=SupplyChesses,proto3" json:"SupplyChesses,omitempty"` //单列的补充棋子
}

func (x *Base_Match3_SupplyChesses) Reset() {
	*x = Base_Match3_SupplyChesses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Match3_SupplyChesses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Match3_SupplyChesses) ProtoMessage() {}

func (x *Base_Match3_SupplyChesses) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Match3_SupplyChesses.ProtoReflect.Descriptor instead.
func (*Base_Match3_SupplyChesses) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{14}
}

func (x *Base_Match3_SupplyChesses) GetSupplyChesses() []*Base_Match3_SimpleChess {
	if x != nil {
		return x.SupplyChesses
	}
	return nil
}

// -------结算------
type Base_Match3_JieSuanRoleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankingNum     int32           `protobuf:"varint,1,opt,name=RankingNum,proto3" json:"RankingNum,omitempty"` //排名数
	Id             string          `protobuf:"bytes,2,opt,name=Id,proto3" json:"Id,omitempty"`
	ChairId        int32           `protobuf:"varint,3,opt,name=ChairId,proto3" json:"ChairId,omitempty"` //椅子id
	NickName       string          `protobuf:"bytes,4,opt,name=NickName,proto3" json:"NickName,omitempty"`
	RewardItemList map[int32]int32 `protobuf:"bytes,5,rep,name=RewardItemList,proto3" json:"RewardItemList,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //奖励物品列表 key:是ItemId;v:数量num;
	IsWin          bool            `protobuf:"varint,6,opt,name=IsWin,proto3" json:"IsWin,omitempty"`                                                                                                            //true:赢;false;输
}

func (x *Base_Match3_JieSuanRoleInfo) Reset() {
	*x = Base_Match3_JieSuanRoleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Match3_JieSuanRoleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Match3_JieSuanRoleInfo) ProtoMessage() {}

func (x *Base_Match3_JieSuanRoleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Match3_JieSuanRoleInfo.ProtoReflect.Descriptor instead.
func (*Base_Match3_JieSuanRoleInfo) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{15}
}

func (x *Base_Match3_JieSuanRoleInfo) GetRankingNum() int32 {
	if x != nil {
		return x.RankingNum
	}
	return 0
}

func (x *Base_Match3_JieSuanRoleInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Base_Match3_JieSuanRoleInfo) GetChairId() int32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *Base_Match3_JieSuanRoleInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *Base_Match3_JieSuanRoleInfo) GetRewardItemList() map[int32]int32 {
	if x != nil {
		return x.RewardItemList
	}
	return nil
}

func (x *Base_Match3_JieSuanRoleInfo) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

// 干扰信息
type Base_Match3_InterfereInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromRoleId string `protobuf:"bytes,1,opt,name=FromRoleId,proto3" json:"FromRoleId,omitempty"` //发起的玩家id
	// 攻击目标数组
	DstRoleId        []string `protobuf:"bytes,2,rep,name=DstRoleId,proto3" json:"DstRoleId,omitempty"`                 //目标玩家id
	InterfereType    int32    `protobuf:"varint,3,opt,name=InterfereType,proto3" json:"InterfereType,omitempty"`        //干扰类型：5冰冻，6燃烧
	InterfereKeys    []int32  `protobuf:"varint,4,rep,packed,name=InterfereKeys,proto3" json:"InterfereKeys,omitempty"` //被干扰的棋子
	SkillEnergyDt    int32    `protobuf:"varint,5,opt,name=SkillEnergyDt,proto3" json:"SkillEnergyDt,omitempty"`        //大招能量变化值
	BlessingEnergyDt int32    `protobuf:"varint,6,opt,name=BlessingEnergyDt,proto3" json:"BlessingEnergyDt,omitempty"`  //祝福能量变化值
}

func (x *Base_Match3_InterfereInfo) Reset() {
	*x = Base_Match3_InterfereInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Match3_InterfereInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Match3_InterfereInfo) ProtoMessage() {}

func (x *Base_Match3_InterfereInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Match3_InterfereInfo.ProtoReflect.Descriptor instead.
func (*Base_Match3_InterfereInfo) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{16}
}

func (x *Base_Match3_InterfereInfo) GetFromRoleId() string {
	if x != nil {
		return x.FromRoleId
	}
	return ""
}

func (x *Base_Match3_InterfereInfo) GetDstRoleId() []string {
	if x != nil {
		return x.DstRoleId
	}
	return nil
}

func (x *Base_Match3_InterfereInfo) GetInterfereType() int32 {
	if x != nil {
		return x.InterfereType
	}
	return 0
}

func (x *Base_Match3_InterfereInfo) GetInterfereKeys() []int32 {
	if x != nil {
		return x.InterfereKeys
	}
	return nil
}

func (x *Base_Match3_InterfereInfo) GetSkillEnergyDt() int32 {
	if x != nil {
		return x.SkillEnergyDt
	}
	return 0
}

func (x *Base_Match3_InterfereInfo) GetBlessingEnergyDt() int32 {
	if x != nil {
		return x.BlessingEnergyDt
	}
	return 0
}

// 干扰行动
type Net_Match3_InterfereReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfereInfo *Base_Match3_InterfereInfo `protobuf:"bytes,1,opt,name=InterfereInfo,proto3" json:"InterfereInfo,omitempty"` //干扰数据
}

func (x *Net_Match3_InterfereReq) Reset() {
	*x = Net_Match3_InterfereReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_InterfereReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_InterfereReq) ProtoMessage() {}

func (x *Net_Match3_InterfereReq) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_InterfereReq.ProtoReflect.Descriptor instead.
func (*Net_Match3_InterfereReq) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{17}
}

func (x *Net_Match3_InterfereReq) GetInterfereInfo() *Base_Match3_InterfereInfo {
	if x != nil {
		return x.InterfereInfo
	}
	return nil
}

// 干扰行动 回包
type Net_Match3_InterfereRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfereInfo *Base_Match3_InterfereInfo `protobuf:"bytes,1,opt,name=InterfereInfo,proto3" json:"InterfereInfo,omitempty"` //干扰数据
}

func (x *Net_Match3_InterfereRet) Reset() {
	*x = Net_Match3_InterfereRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_InterfereRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_InterfereRet) ProtoMessage() {}

func (x *Net_Match3_InterfereRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_InterfereRet.ProtoReflect.Descriptor instead.
func (*Net_Match3_InterfereRet) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{18}
}

func (x *Net_Match3_InterfereRet) GetInterfereInfo() *Base_Match3_InterfereInfo {
	if x != nil {
		return x.InterfereInfo
	}
	return nil
}

// 1:开始匹配房间 进入房间
type Net_Match3_StartMatchingRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 战斗类型
	// RoomTypeIdPVE1v1    = 10101 //人机1v1
	// RoomTypeIdPVP1v1    = 10201 //真人1v1
	// RoomTypeIdPVP1v3    = 10301 //真人4人混战
	// RoomTypeIdCoin1v1p1 = 10401 //金币房间 初级
	// RoomTypeIdCoin1v1p2 = 10402 //金币房间 中级
	// RoomTypeIdCoin1v1p3 = 10403 //金币房间 高级
	// RoomTypeIdCoin1v1p4 = 10404 //金币房间 顶级
	RoomTypeId   int32 `protobuf:"varint,1,opt,name=RoomTypeId,proto3" json:"RoomTypeId,omitempty"`
	SelectHeroId int32 `protobuf:"varint,2,opt,name=SelectHeroId,proto3" json:"SelectHeroId,omitempty"` //选择英雄Id
}

func (x *Net_Match3_StartMatchingRoomReq) Reset() {
	*x = Net_Match3_StartMatchingRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_StartMatchingRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_StartMatchingRoomReq) ProtoMessage() {}

func (x *Net_Match3_StartMatchingRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_StartMatchingRoomReq.ProtoReflect.Descriptor instead.
func (*Net_Match3_StartMatchingRoomReq) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{19}
}

func (x *Net_Match3_StartMatchingRoomReq) GetRoomTypeId() int32 {
	if x != nil {
		return x.RoomTypeId
	}
	return 0
}

func (x *Net_Match3_StartMatchingRoomReq) GetSelectHeroId() int32 {
	if x != nil {
		return x.SelectHeroId
	}
	return 0
}

// 开始匹配房间 进入房间
type Net_Match3_StartMatchingRoomRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// //0:匹配中...;1:房间中...;
	// -1:房间类型参数错误;
	// -2:金币不够;
	// -3:未知错误的英雄;
	// -4:英雄次数不够
	Ret int32 `protobuf:"varint,1,opt,name=Ret,proto3" json:"Ret,omitempty"`
}

func (x *Net_Match3_StartMatchingRoomRet) Reset() {
	*x = Net_Match3_StartMatchingRoomRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_StartMatchingRoomRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_StartMatchingRoomRet) ProtoMessage() {}

func (x *Net_Match3_StartMatchingRoomRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_StartMatchingRoomRet.ProtoReflect.Descriptor instead.
func (*Net_Match3_StartMatchingRoomRet) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{20}
}

func (x *Net_Match3_StartMatchingRoomRet) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

// 取消匹配房间
type Net_Match3_CancelMatchingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Net_Match3_CancelMatchingReq) Reset() {
	*x = Net_Match3_CancelMatchingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_CancelMatchingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_CancelMatchingReq) ProtoMessage() {}

func (x *Net_Match3_CancelMatchingReq) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_CancelMatchingReq.ProtoReflect.Descriptor instead.
func (*Net_Match3_CancelMatchingReq) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{21}
}

type Net_Match3_CancelMatchingRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32 `protobuf:"varint,1,opt,name=Ret,proto3" json:"Ret,omitempty"` // 0:取消匹配成功;1:取消匹配失败;
}

func (x *Net_Match3_CancelMatchingRet) Reset() {
	*x = Net_Match3_CancelMatchingRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_CancelMatchingRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_CancelMatchingRet) ProtoMessage() {}

func (x *Net_Match3_CancelMatchingRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_CancelMatchingRet.ProtoReflect.Descriptor instead.
func (*Net_Match3_CancelMatchingRet) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{22}
}

func (x *Net_Match3_CancelMatchingRet) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

// 2:广播 其它玩家进入房间
type Net_Match3_OtherRoleEnterRoomRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherRole *Base_Match3_RoleInfo `protobuf:"bytes,1,opt,name=OtherRole,proto3" json:"OtherRole,omitempty"` //其它玩家进入房间
}

func (x *Net_Match3_OtherRoleEnterRoomRet) Reset() {
	*x = Net_Match3_OtherRoleEnterRoomRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_OtherRoleEnterRoomRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_OtherRoleEnterRoomRet) ProtoMessage() {}

func (x *Net_Match3_OtherRoleEnterRoomRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_OtherRoleEnterRoomRet.ProtoReflect.Descriptor instead.
func (*Net_Match3_OtherRoleEnterRoomRet) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{23}
}

func (x *Net_Match3_OtherRoleEnterRoomRet) GetOtherRole() *Base_Match3_RoleInfo {
	if x != nil {
		return x.OtherRole
	}
	return nil
}

// 3:开始匹配成 返回房间
type Net_Match3_StartMatchingRoomSuccessRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomInfo *Base_Match3_RoomInfo `protobuf:"bytes,1,opt,name=RoomInfo,proto3" json:"RoomInfo,omitempty"`
}

func (x *Net_Match3_StartMatchingRoomSuccessRet) Reset() {
	*x = Net_Match3_StartMatchingRoomSuccessRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_StartMatchingRoomSuccessRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_StartMatchingRoomSuccessRet) ProtoMessage() {}

func (x *Net_Match3_StartMatchingRoomSuccessRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_StartMatchingRoomSuccessRet.ProtoReflect.Descriptor instead.
func (*Net_Match3_StartMatchingRoomSuccessRet) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{24}
}

func (x *Net_Match3_StartMatchingRoomSuccessRet) GetRoomInfo() *Base_Match3_RoomInfo {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

// 4:获取场景 加载完场景后获取场景信息 断线重连也是这个
type Net_Match3_GetSceneInformationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Net_Match3_GetSceneInformationReq) Reset() {
	*x = Net_Match3_GetSceneInformationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_GetSceneInformationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_GetSceneInformationReq) ProtoMessage() {}

func (x *Net_Match3_GetSceneInformationReq) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_GetSceneInformationReq.ProtoReflect.Descriptor instead.
func (*Net_Match3_GetSceneInformationReq) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{25}
}

// 获取场景信息
type Net_Match3_GetSceneInformationRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      int32                 `protobuf:"varint,1,opt,name=Ret,proto3" json:"Ret,omitempty"`          //0:成功;1:失败 没有房间;
	RoomInfo *Base_Match3_RoomInfo `protobuf:"bytes,2,opt,name=RoomInfo,proto3" json:"RoomInfo,omitempty"` //
}

func (x *Net_Match3_GetSceneInformationRet) Reset() {
	*x = Net_Match3_GetSceneInformationRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_GetSceneInformationRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_GetSceneInformationRet) ProtoMessage() {}

func (x *Net_Match3_GetSceneInformationRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_GetSceneInformationRet.ProtoReflect.Descriptor instead.
func (*Net_Match3_GetSceneInformationRet) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{26}
}

func (x *Net_Match3_GetSceneInformationRet) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *Net_Match3_GetSceneInformationRet) GetRoomInfo() *Base_Match3_RoomInfo {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

// 5:主动推送 倒计时
type Net_Match3_CountdownRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalNum     int32 `protobuf:"varint,1,opt,name=TotalNum,proto3" json:"TotalNum,omitempty"`         //总数
	CountdownNum int32 `protobuf:"varint,2,opt,name=CountdownNum,proto3" json:"CountdownNum,omitempty"` //倒计时数
}

func (x *Net_Match3_CountdownRet) Reset() {
	*x = Net_Match3_CountdownRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_CountdownRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_CountdownRet) ProtoMessage() {}

func (x *Net_Match3_CountdownRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_CountdownRet.ProtoReflect.Descriptor instead.
func (*Net_Match3_CountdownRet) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{27}
}

func (x *Net_Match3_CountdownRet) GetTotalNum() int32 {
	if x != nil {
		return x.TotalNum
	}
	return 0
}

func (x *Net_Match3_CountdownRet) GetCountdownNum() int32 {
	if x != nil {
		return x.CountdownNum
	}
	return 0
}

// 6:开始
type Net_Match3_StartRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Net_Match3_StartRet) Reset() {
	*x = Net_Match3_StartRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_StartRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_StartRet) ProtoMessage() {}

func (x *Net_Match3_StartRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_StartRet.ProtoReflect.Descriptor instead.
func (*Net_Match3_StartRet) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{28}
}

// 7:下一步行动
type Net_Match3_NextMoveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId         string                      `protobuf:"bytes,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`                 //
	ChairId        int32                       `protobuf:"varint,2,opt,name=ChairId,proto3" json:"ChairId,omitempty"`              //椅子Id
	ChessboardInfo *Base_Match3_ChessboardInfo `protobuf:"bytes,3,opt,name=ChessboardInfo,proto3" json:"ChessboardInfo,omitempty"` //棋盘信息
	HeroInfo       *Base_Match3_HeroInfo       `protobuf:"bytes,4,opt,name=HeroInfo,proto3" json:"HeroInfo,omitempty"`             //英雄信息
}

func (x *Net_Match3_NextMoveReq) Reset() {
	*x = Net_Match3_NextMoveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_NextMoveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_NextMoveReq) ProtoMessage() {}

func (x *Net_Match3_NextMoveReq) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_NextMoveReq.ProtoReflect.Descriptor instead.
func (*Net_Match3_NextMoveReq) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{29}
}

func (x *Net_Match3_NextMoveReq) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *Net_Match3_NextMoveReq) GetChairId() int32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *Net_Match3_NextMoveReq) GetChessboardInfo() *Base_Match3_ChessboardInfo {
	if x != nil {
		return x.ChessboardInfo
	}
	return nil
}

func (x *Net_Match3_NextMoveReq) GetHeroInfo() *Base_Match3_HeroInfo {
	if x != nil {
		return x.HeroInfo
	}
	return nil
}

// 下一步行动 返回
type Net_Match3_NextMoveRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret            int32                       `protobuf:"varint,1,opt,name=Ret,proto3" json:"Ret,omitempty"`                      //1:失败没有房间;2:游戏结算中
	RoleId         string                      `protobuf:"bytes,2,opt,name=RoleId,proto3" json:"RoleId,omitempty"`                 //
	ChairId        int32                       `protobuf:"varint,3,opt,name=ChairId,proto3" json:"ChairId,omitempty"`              //椅子Id
	ChessboardInfo *Base_Match3_ChessboardInfo `protobuf:"bytes,4,opt,name=ChessboardInfo,proto3" json:"ChessboardInfo,omitempty"` //棋盘信息
	HeroInfo       *Base_Match3_HeroInfo       `protobuf:"bytes,5,opt,name=HeroInfo,proto3" json:"HeroInfo,omitempty"`             //英雄信息
}

func (x *Net_Match3_NextMoveRet) Reset() {
	*x = Net_Match3_NextMoveRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_NextMoveRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_NextMoveRet) ProtoMessage() {}

func (x *Net_Match3_NextMoveRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_NextMoveRet.ProtoReflect.Descriptor instead.
func (*Net_Match3_NextMoveRet) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{30}
}

func (x *Net_Match3_NextMoveRet) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *Net_Match3_NextMoveRet) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *Net_Match3_NextMoveRet) GetChairId() int32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *Net_Match3_NextMoveRet) GetChessboardInfo() *Base_Match3_ChessboardInfo {
	if x != nil {
		return x.ChessboardInfo
	}
	return nil
}

func (x *Net_Match3_NextMoveRet) GetHeroInfo() *Base_Match3_HeroInfo {
	if x != nil {
		return x.HeroInfo
	}
	return nil
}

// 攻击目标英雄
type Base_Match3_AttackTargetHero struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId      string `protobuf:"bytes,1,opt,name=TargetId,proto3" json:"TargetId,omitempty"`            //目标Id数组
	TargetValue   int32  `protobuf:"varint,2,opt,name=TargetValue,proto3" json:"TargetValue,omitempty"`     //伤害值
	TargetHp      int32  `protobuf:"varint,3,opt,name=TargetHp,proto3" json:"TargetHp,omitempty"`           //被攻击血量  只有HeroAttackRet才有用
	TargetHpLimit int32  `protobuf:"varint,4,opt,name=TargetHpLimit,proto3" json:"TargetHpLimit,omitempty"` //血上限 只有HeroAttackRet才有用
}

func (x *Base_Match3_AttackTargetHero) Reset() {
	*x = Base_Match3_AttackTargetHero{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Match3_AttackTargetHero) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Match3_AttackTargetHero) ProtoMessage() {}

func (x *Base_Match3_AttackTargetHero) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Match3_AttackTargetHero.ProtoReflect.Descriptor instead.
func (*Base_Match3_AttackTargetHero) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{31}
}

func (x *Base_Match3_AttackTargetHero) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *Base_Match3_AttackTargetHero) GetTargetValue() int32 {
	if x != nil {
		return x.TargetValue
	}
	return 0
}

func (x *Base_Match3_AttackTargetHero) GetTargetHp() int32 {
	if x != nil {
		return x.TargetHp
	}
	return 0
}

func (x *Base_Match3_AttackTargetHero) GetTargetHpLimit() int32 {
	if x != nil {
		return x.TargetHpLimit
	}
	return 0
}

// 英雄攻击attacked
type Net_Match3_HeroAttackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AId                  string                          `protobuf:"bytes,1,opt,name=AId,proto3" json:"AId,omitempty"`                                   //操作玩家Id
	AValue               int32                           `protobuf:"varint,2,opt,name=AValue,proto3" json:"AValue,omitempty"`                            //给自己加血
	SkillId              int32                           `protobuf:"varint,3,opt,name=SkillId,proto3" json:"SkillId,omitempty"`                          //使用技能Id 0:普通攻击;
	AttackTargetHeroList []*Base_Match3_AttackTargetHero `protobuf:"bytes,4,rep,name=AttackTargetHeroList,proto3" json:"AttackTargetHeroList,omitempty"` //攻击目标英雄数组
}

func (x *Net_Match3_HeroAttackReq) Reset() {
	*x = Net_Match3_HeroAttackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_HeroAttackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_HeroAttackReq) ProtoMessage() {}

func (x *Net_Match3_HeroAttackReq) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_HeroAttackReq.ProtoReflect.Descriptor instead.
func (*Net_Match3_HeroAttackReq) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{32}
}

func (x *Net_Match3_HeroAttackReq) GetAId() string {
	if x != nil {
		return x.AId
	}
	return ""
}

func (x *Net_Match3_HeroAttackReq) GetAValue() int32 {
	if x != nil {
		return x.AValue
	}
	return 0
}

func (x *Net_Match3_HeroAttackReq) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *Net_Match3_HeroAttackReq) GetAttackTargetHeroList() []*Base_Match3_AttackTargetHero {
	if x != nil {
		return x.AttackTargetHeroList
	}
	return nil
}

// 英雄攻击
type Net_Match3_HeroAttackRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                  int32                           `protobuf:"varint,1,opt,name=Ret,proto3" json:"Ret,omitempty"`                                  //0:成功;1:没有房间;2:游戏结束;
	AId                  string                          `protobuf:"bytes,2,opt,name=AId,proto3" json:"AId,omitempty"`                                   //操作玩家Id
	AValue               int32                           `protobuf:"varint,3,opt,name=AValue,proto3" json:"AValue,omitempty"`                            //给自己加血值
	AHp                  int32                           `protobuf:"varint,4,opt,name=AHp,proto3" json:"AHp,omitempty"`                                  //给当前自己血值
	AHpLimit             int32                           `protobuf:"varint,5,opt,name=AHpLimit,proto3" json:"AHpLimit,omitempty"`                        //自己血上限
	SkillId              int32                           `protobuf:"varint,6,opt,name=SkillId,proto3" json:"SkillId,omitempty"`                          //使用技能Id 0:普通攻击;
	AttackTargetHeroList []*Base_Match3_AttackTargetHero `protobuf:"bytes,7,rep,name=AttackTargetHeroList,proto3" json:"AttackTargetHeroList,omitempty"` //攻击目标英雄数组
}

func (x *Net_Match3_HeroAttackRet) Reset() {
	*x = Net_Match3_HeroAttackRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_HeroAttackRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_HeroAttackRet) ProtoMessage() {}

func (x *Net_Match3_HeroAttackRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_HeroAttackRet.ProtoReflect.Descriptor instead.
func (*Net_Match3_HeroAttackRet) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{33}
}

func (x *Net_Match3_HeroAttackRet) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *Net_Match3_HeroAttackRet) GetAId() string {
	if x != nil {
		return x.AId
	}
	return ""
}

func (x *Net_Match3_HeroAttackRet) GetAValue() int32 {
	if x != nil {
		return x.AValue
	}
	return 0
}

func (x *Net_Match3_HeroAttackRet) GetAHp() int32 {
	if x != nil {
		return x.AHp
	}
	return 0
}

func (x *Net_Match3_HeroAttackRet) GetAHpLimit() int32 {
	if x != nil {
		return x.AHpLimit
	}
	return 0
}

func (x *Net_Match3_HeroAttackRet) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *Net_Match3_HeroAttackRet) GetAttackTargetHeroList() []*Base_Match3_AttackTargetHero {
	if x != nil {
		return x.AttackTargetHeroList
	}
	return nil
}

// 等待其它玩家离线倒计时
type Net_Match3_WaitOtherPlayerOfflineCountdownRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Net_Match3_WaitOtherPlayerOfflineCountdownRet) Reset() {
	*x = Net_Match3_WaitOtherPlayerOfflineCountdownRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_WaitOtherPlayerOfflineCountdownRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_WaitOtherPlayerOfflineCountdownRet) ProtoMessage() {}

func (x *Net_Match3_WaitOtherPlayerOfflineCountdownRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_WaitOtherPlayerOfflineCountdownRet.ProtoReflect.Descriptor instead.
func (*Net_Match3_WaitOtherPlayerOfflineCountdownRet) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{34}
}

// -------4人战斗的时候 单人退出的结算面板------
type Net_Match3_RoleDeathJieSuanRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JieSuanRoleInfo *Base_Match3_JieSuanRoleInfo `protobuf:"bytes,1,opt,name=JieSuanRoleInfo,proto3" json:"JieSuanRoleInfo,omitempty"` //玩家退出结算角色信息
}

func (x *Net_Match3_RoleDeathJieSuanRet) Reset() {
	*x = Net_Match3_RoleDeathJieSuanRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_RoleDeathJieSuanRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_RoleDeathJieSuanRet) ProtoMessage() {}

func (x *Net_Match3_RoleDeathJieSuanRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_RoleDeathJieSuanRet.ProtoReflect.Descriptor instead.
func (*Net_Match3_RoleDeathJieSuanRet) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{35}
}

func (x *Net_Match3_RoleDeathJieSuanRet) GetJieSuanRoleInfo() *Base_Match3_JieSuanRoleInfo {
	if x != nil {
		return x.JieSuanRoleInfo
	}
	return nil
}

// 8:结束 GameOver
type Net_Match3_GameOverRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JieSuan map[string]*Base_Match3_JieSuanRoleInfo `protobuf:"bytes,1,rep,name=JieSuan,proto3" json:"JieSuan,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Net_Match3_GameOverRet) Reset() {
	*x = Net_Match3_GameOverRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_GameOverRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_GameOverRet) ProtoMessage() {}

func (x *Net_Match3_GameOverRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_GameOverRet.ProtoReflect.Descriptor instead.
func (*Net_Match3_GameOverRet) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{36}
}

func (x *Net_Match3_GameOverRet) GetJieSuan() map[string]*Base_Match3_JieSuanRoleInfo {
	if x != nil {
		return x.JieSuan
	}
	return nil
}

// 9:玩家请求退出房间
type Net_Match3_ExitRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Net_Match3_ExitRoomReq) Reset() {
	*x = Net_Match3_ExitRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_ExitRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_ExitRoomReq) ProtoMessage() {}

func (x *Net_Match3_ExitRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_ExitRoomReq.ProtoReflect.Descriptor instead.
func (*Net_Match3_ExitRoomReq) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{37}
}

type Net_Match3_ExitRoomRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    int32 `protobuf:"varint,1,opt,name=Ret,proto3" json:"Ret,omitempty"`       //0:退出房间成功;-1:退出房间失败;
	RoleId int32 `protobuf:"varint,2,opt,name=RoleId,proto3" json:"RoleId,omitempty"` //其它玩家退出房间
}

func (x *Net_Match3_ExitRoomRet) Reset() {
	*x = Net_Match3_ExitRoomRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_ExitRoomRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_ExitRoomRet) ProtoMessage() {}

func (x *Net_Match3_ExitRoomRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_ExitRoomRet.ProtoReflect.Descriptor instead.
func (*Net_Match3_ExitRoomRet) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{38}
}

func (x *Net_Match3_ExitRoomRet) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *Net_Match3_ExitRoomRet) GetRoleId() int32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

// 其它玩家退出
type Net_Match3_OtherRoleExitRoomRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId int32 `protobuf:"varint,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"` //其它玩家退出房间
}

func (x *Net_Match3_OtherRoleExitRoomRet) Reset() {
	*x = Net_Match3_OtherRoleExitRoomRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_OtherRoleExitRoomRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_OtherRoleExitRoomRet) ProtoMessage() {}

func (x *Net_Match3_OtherRoleExitRoomRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_OtherRoleExitRoomRet.ProtoReflect.Descriptor instead.
func (*Net_Match3_OtherRoleExitRoomRet) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{39}
}

func (x *Net_Match3_OtherRoleExitRoomRet) GetRoleId() int32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

// ---------技能栏----------------------------------------------
// 释放技能
type Net_Match3_ReleaseSkillReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId       int32 `protobuf:"varint,1,opt,name=SkillId,proto3" json:"SkillId,omitempty"`             //释放技能
	SkillPosition int32 `protobuf:"varint,2,opt,name=SkillPosition,proto3" json:"SkillPosition,omitempty"` //技能位置
}

func (x *Net_Match3_ReleaseSkillReq) Reset() {
	*x = Net_Match3_ReleaseSkillReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_ReleaseSkillReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_ReleaseSkillReq) ProtoMessage() {}

func (x *Net_Match3_ReleaseSkillReq) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_ReleaseSkillReq.ProtoReflect.Descriptor instead.
func (*Net_Match3_ReleaseSkillReq) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{40}
}

func (x *Net_Match3_ReleaseSkillReq) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *Net_Match3_ReleaseSkillReq) GetSkillPosition() int32 {
	if x != nil {
		return x.SkillPosition
	}
	return 0
}

type Net_Match3_ReleaseSkillRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Net_Match3_ReleaseSkillRet) Reset() {
	*x = Net_Match3_ReleaseSkillRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_ReleaseSkillRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_ReleaseSkillRet) ProtoMessage() {}

func (x *Net_Match3_ReleaseSkillRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_ReleaseSkillRet.ProtoReflect.Descriptor instead.
func (*Net_Match3_ReleaseSkillRet) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{41}
}

// ---------下面消息暂时不用----------------------------------------------
// 进入房间
type Net_Match3_EnterRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Net_Match3_EnterRoomReq) Reset() {
	*x = Net_Match3_EnterRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_EnterRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_EnterRoomReq) ProtoMessage() {}

func (x *Net_Match3_EnterRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_EnterRoomReq.ProtoReflect.Descriptor instead.
func (*Net_Match3_EnterRoomReq) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{42}
}

type Net_Match3_EnterRoomRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      int32                 `protobuf:"varint,1,opt,name=Ret,proto3" json:"Ret,omitempty"`          //0:成功;-1:失败;
	RoomInfo *Base_Match3_RoomInfo `protobuf:"bytes,2,opt,name=RoomInfo,proto3" json:"RoomInfo,omitempty"` //
}

func (x *Net_Match3_EnterRoomRet) Reset() {
	*x = Net_Match3_EnterRoomRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_EnterRoomRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_EnterRoomRet) ProtoMessage() {}

func (x *Net_Match3_EnterRoomRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_EnterRoomRet.ProtoReflect.Descriptor instead.
func (*Net_Match3_EnterRoomRet) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{43}
}

func (x *Net_Match3_EnterRoomRet) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *Net_Match3_EnterRoomRet) GetRoomInfo() *Base_Match3_RoomInfo {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

// 准备
type Net_Match3_PrepareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPrepare bool `protobuf:"varint,1,opt,name=IsPrepare,proto3" json:"IsPrepare,omitempty"` //true:准备；false:准备取消;
}

func (x *Net_Match3_PrepareReq) Reset() {
	*x = Net_Match3_PrepareReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_PrepareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_PrepareReq) ProtoMessage() {}

func (x *Net_Match3_PrepareReq) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_PrepareReq.ProtoReflect.Descriptor instead.
func (*Net_Match3_PrepareReq) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{44}
}

func (x *Net_Match3_PrepareReq) GetIsPrepare() bool {
	if x != nil {
		return x.IsPrepare
	}
	return false
}

// 准备
type Net_Match3_PrepareRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// int32 Ret =1;//0:成功;1:失败
	RoleId    int32 `protobuf:"varint,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`       //准备玩家Id
	IsPrepare bool  `protobuf:"varint,2,opt,name=IsPrepare,proto3" json:"IsPrepare,omitempty"` //true:准备；false:未准备;
}

func (x *Net_Match3_PrepareRet) Reset() {
	*x = Net_Match3_PrepareRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_PrepareRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_PrepareRet) ProtoMessage() {}

func (x *Net_Match3_PrepareRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_PrepareRet.ProtoReflect.Descriptor instead.
func (*Net_Match3_PrepareRet) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{45}
}

func (x *Net_Match3_PrepareRet) GetRoleId() int32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *Net_Match3_PrepareRet) GetIsPrepare() bool {
	if x != nil {
		return x.IsPrepare
	}
	return false
}

// 购买天赋技能 只有在房间里才能购买
type Net_Match3_BuyTalentSkillReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalentSkillId int32 `protobuf:"varint,1,opt,name=TalentSkillId,proto3" json:"TalentSkillId,omitempty"` //天赋技能Id
}

func (x *Net_Match3_BuyTalentSkillReq) Reset() {
	*x = Net_Match3_BuyTalentSkillReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_BuyTalentSkillReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_BuyTalentSkillReq) ProtoMessage() {}

func (x *Net_Match3_BuyTalentSkillReq) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_BuyTalentSkillReq.ProtoReflect.Descriptor instead.
func (*Net_Match3_BuyTalentSkillReq) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{46}
}

func (x *Net_Match3_BuyTalentSkillReq) GetTalentSkillId() int32 {
	if x != nil {
		return x.TalentSkillId
	}
	return 0
}

// 购买天赋技能
type Net_Match3_BuyTalentSkillRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret           int32 `protobuf:"varint,1,opt,name=Ret,proto3" json:"Ret,omitempty"`                     //0:成功;1:未知技能;2:没有房间;3:金币不够;
	TalentSkillId int32 `protobuf:"varint,2,opt,name=TalentSkillId,proto3" json:"TalentSkillId,omitempty"` //天赋技能Id
}

func (x *Net_Match3_BuyTalentSkillRet) Reset() {
	*x = Net_Match3_BuyTalentSkillRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_BuyTalentSkillRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_BuyTalentSkillRet) ProtoMessage() {}

func (x *Net_Match3_BuyTalentSkillRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_BuyTalentSkillRet.ProtoReflect.Descriptor instead.
func (*Net_Match3_BuyTalentSkillRet) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{47}
}

func (x *Net_Match3_BuyTalentSkillRet) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *Net_Match3_BuyTalentSkillRet) GetTalentSkillId() int32 {
	if x != nil {
		return x.TalentSkillId
	}
	return 0
}

// =======todo=======回合制=========================================
// 下一轮操作
type Net_Match3_NextRoundOperationRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxRoundNum            int32  `protobuf:"varint,1,opt,name=MaxRoundNum,proto3" json:"MaxRoundNum,omitempty"`                       //最大轮回数
	CurrentRoundNum        int32  `protobuf:"varint,2,opt,name=CurrentRoundNum,proto3" json:"CurrentRoundNum,omitempty"`               //当前轮回数
	OperationPlayerId      string `protobuf:"bytes,3,opt,name=OperationPlayerId,proto3" json:"OperationPlayerId,omitempty"`            //当前操作玩家Id
	OperationPlayerEndTime int64  `protobuf:"varint,4,opt,name=OperationPlayerEndTime,proto3" json:"OperationPlayerEndTime,omitempty"` //操作玩家结束时间
}

func (x *Net_Match3_NextRoundOperationRet) Reset() {
	*x = Net_Match3_NextRoundOperationRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Match3_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Match3_NextRoundOperationRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Match3_NextRoundOperationRet) ProtoMessage() {}

func (x *Net_Match3_NextRoundOperationRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Match3_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Match3_NextRoundOperationRet.ProtoReflect.Descriptor instead.
func (*Net_Match3_NextRoundOperationRet) Descriptor() ([]byte, []int) {
	return file_Net_Match3_proto_rawDescGZIP(), []int{48}
}

func (x *Net_Match3_NextRoundOperationRet) GetMaxRoundNum() int32 {
	if x != nil {
		return x.MaxRoundNum
	}
	return 0
}

func (x *Net_Match3_NextRoundOperationRet) GetCurrentRoundNum() int32 {
	if x != nil {
		return x.CurrentRoundNum
	}
	return 0
}

func (x *Net_Match3_NextRoundOperationRet) GetOperationPlayerId() string {
	if x != nil {
		return x.OperationPlayerId
	}
	return ""
}

func (x *Net_Match3_NextRoundOperationRet) GetOperationPlayerEndTime() int64 {
	if x != nil {
		return x.OperationPlayerEndTime
	}
	return 0
}

var File_Net_Match3_proto protoreflect.FileDescriptor

var file_Net_Match3_proto_rawDesc = []byte{
	0x0a, 0x10, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x50, 0x62, 0x22, 0x4e, 0x0a, 0x16, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x34, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x33, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb5, 0x03, 0x0a, 0x14, 0x42, 0x61, 0x73, 0x65, 0x5f,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x6f, 0x6f,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x4e, 0x75,
	0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x69, 0x72, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x69, 0x72, 0x4d, 0x61, 0x78,
	0x4e, 0x75, 0x6d, 0x12, 0x42, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x52,
	0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x55, 0x0a, 0x0d, 0x52, 0x6f, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x62, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x52, 0x6f, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6,
	0x01, 0x0a, 0x16, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x53,
	0x65, 0x74, 0x43, 0x68, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0d, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x33, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x57,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdb, 0x09, 0x0a, 0x1a, 0x42, 0x61, 0x73, 0x65,
	0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x45, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x5d, 0x0a, 0x0f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x50, 0x62, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x45,
	0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x5a, 0x0a, 0x0e, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x6c, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x4e, 0x65, 0x78,
	0x74, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x0d, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x33, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x73, 0x73, 0x47, 0x72, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x47, 0x72, 0x69,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x43, 0x68, 0x65, 0x73, 0x73, 0x47, 0x72, 0x69,
	0x64, 0x12, 0x57, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x13, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x13, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x5d, 0x0a, 0x14, 0x46, 0x69, 0x72, 0x73, 0x74, 0x45, 0x6c,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x13, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x6c, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50,
	0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x12, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x50, 0x62, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x43, 0x68, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x47, 0x72, 0x69, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33,
	0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x62, 0x0a, 0x18, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f,
	0x53, 0x65, 0x74, 0x43, 0x68, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe, 0x02, 0x0a, 0x14, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x48, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x48, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x70, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x48, 0x70, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x74, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x41, 0x74, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x48, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x75, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x42, 0x75, 0x79, 0x22, 0x8d, 0x02, 0x0a, 0x18, 0x42, 0x61, 0x73, 0x65, 0x5f,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x61, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x10, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x31, 0x12, 0x4f, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x10, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x32, 0x12, 0x4f, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33,
	0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x33, 0x22, 0x85, 0x03, 0x0a, 0x1f, 0x42, 0x61, 0x73, 0x65, 0x5f,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x49, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x6f, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x6f, 0x6b,
	0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf8,
	0x01, 0x0a, 0x19, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x48,
	0x65, 0x72, 0x6f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x11,
	0x48, 0x65, 0x72, 0x6f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x48,
	0x65, 0x72, 0x6f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x1a, 0x67, 0x0a, 0x16, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x50, 0x62,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x48, 0x65, 0x72,
	0x6f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4f, 0x0a, 0x1d, 0x42, 0x61, 0x73,
	0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2c, 0x0a, 0x1a, 0x42, 0x61,
	0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0xb8, 0x03, 0x0a, 0x14, 0x42, 0x61, 0x73,
	0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x41, 0x49, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x41, 0x49, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x65, 0x72,
	0x6f, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0c, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x42, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33,
	0x5f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0e, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x33, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x31, 0x0a, 0x15, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x33, 0x5f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x49,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x17, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x68, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x53, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x11,
	0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x43, 0x68, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x43, 0x68, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x75, 0x62, 0x43, 0x68, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x53, 0x75, 0x62, 0x43, 0x68, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x19, 0x42, 0x61, 0x73,
	0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x43, 0x68, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xb9, 0x02, 0x0a, 0x1b, 0x42, 0x61,
	0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x4a, 0x69, 0x65, 0x53, 0x75, 0x61,
	0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61,
	0x69, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x5b, 0x0a, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x4a, 0x69, 0x65, 0x53, 0x75, 0x61, 0x6e,
	0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x49, 0x73, 0x57, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x57,
	0x69, 0x6e, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf7, 0x01, 0x0a, 0x19, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x44, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x65, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x65, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x44, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x44, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x44, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x42,
	0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x44, 0x74, 0x22,
	0x5e, 0x0a, 0x17, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x0d, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x33, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x5e, 0x0a, 0x17, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x52, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x33, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x65, 0x0a, 0x1f, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x52,
	0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x65, 0x72, 0x6f,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x1f, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x33, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x52, 0x65, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x4e,
	0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x22, 0x30, 0x0a, 0x1c, 0x4e,
	0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x52,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x52, 0x65, 0x74, 0x22, 0x5a, 0x0a,
	0x20, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65,
	0x74, 0x12, 0x36, 0x0a, 0x09, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x5e, 0x0a, 0x26, 0x4e, 0x65, 0x74,
	0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x23, 0x0a, 0x21, 0x4e, 0x65, 0x74,
	0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x6b,
	0x0a, 0x21, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x59, 0x0a, 0x17, 0x4e,
	0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x4e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x4e, 0x75, 0x6d, 0x22, 0x15, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x33, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x74, 0x22, 0xc8, 0x01,
	0x0a, 0x16, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x4e, 0x65, 0x78,
	0x74, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0e, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x33, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x34, 0x0a, 0x08, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xda, 0x01, 0x0a, 0x16, 0x4e, 0x65, 0x74,
	0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x4e, 0x65, 0x78, 0x74, 0x4d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33,
	0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x34, 0x0a, 0x08, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x33, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x48, 0x65, 0x72,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x1c, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x70,
	0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x70, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48,
	0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x18, 0x4e, 0x65, 0x74, 0x5f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x41, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x14, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf4, 0x01,
	0x0a, 0x18, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x48, 0x65, 0x72,
	0x6f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x41, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x41, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x41, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x41, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x48, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x41, 0x48, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x48, 0x70, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x41, 0x48, 0x70, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x54,
	0x0a, 0x14, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x65,
	0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x50,
	0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x14,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x2f, 0x0a, 0x2d, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x33, 0x5f, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x65, 0x74, 0x22, 0x6b, 0x0a, 0x1e, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x33, 0x5f, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x61, 0x74, 0x68, 0x4a, 0x69, 0x65,
	0x53, 0x75, 0x61, 0x6e, 0x52, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x4a, 0x69, 0x65, 0x53, 0x75,
	0x61, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x33, 0x5f, 0x4a, 0x69, 0x65, 0x53, 0x75, 0x61, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x4a, 0x69, 0x65, 0x53, 0x75, 0x61, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x33, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x74, 0x12, 0x41, 0x0a,
	0x07, 0x4a, 0x69, 0x65, 0x53, 0x75, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x50, 0x62, 0x2e, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x74, 0x2e, 0x4a, 0x69, 0x65, 0x53, 0x75,
	0x61, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x4a, 0x69, 0x65, 0x53, 0x75, 0x61, 0x6e,
	0x1a, 0x5b, 0x0a, 0x0c, 0x4a, 0x69, 0x65, 0x53, 0x75, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x33, 0x5f, 0x4a, 0x69, 0x65, 0x53, 0x75, 0x61, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x18, 0x0a,
	0x16, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x45, 0x78, 0x69, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x22, 0x42, 0x0a, 0x16, 0x4e, 0x65, 0x74, 0x5f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x52, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x1f, 0x4e,
	0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x1a, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x33, 0x5f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1c, 0x0a, 0x1a, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x33, 0x5f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52,
	0x65, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33,
	0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x22, 0x61, 0x0a,
	0x17, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50,
	0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x35, 0x0a, 0x15, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x22, 0x4d, 0x0a, 0x15, 0x4e, 0x65, 0x74, 0x5f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x22, 0x44, 0x0a, 0x1c, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x33, 0x5f, 0x42, 0x75, 0x79, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54,
	0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x1c,
	0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x5f, 0x42, 0x75, 0x79, 0x54, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x49, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x20, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x33, 0x5f, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x4d, 0x61, 0x78, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0xaa, 0x01, 0x0a, 0x0a,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65,
	0x31, 0x30, 0x31, 0x30, 0x31, 0x10, 0xf5, 0x4e, 0x12, 0x0e, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65,
	0x31, 0x30, 0x32, 0x30, 0x31, 0x10, 0xd9, 0x4f, 0x12, 0x0e, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65,
	0x31, 0x30, 0x32, 0x30, 0x32, 0x10, 0xda, 0x4f, 0x12, 0x0e, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65,
	0x31, 0x30, 0x33, 0x30, 0x31, 0x10, 0xbd, 0x50, 0x12, 0x0e, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65,
	0x31, 0x30, 0x34, 0x30, 0x31, 0x10, 0xa1, 0x51, 0x12, 0x0e, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65,
	0x31, 0x30, 0x34, 0x30, 0x32, 0x10, 0xa2, 0x51, 0x12, 0x0e, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65,
	0x31, 0x30, 0x34, 0x30, 0x33, 0x10, 0xa3, 0x51, 0x12, 0x0e, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65,
	0x31, 0x30, 0x34, 0x30, 0x34, 0x10, 0xa4, 0x51, 0x12, 0x0e, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65,
	0x31, 0x30, 0x35, 0x30, 0x31, 0x10, 0x85, 0x52, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Net_Match3_proto_rawDescOnce sync.Once
	file_Net_Match3_proto_rawDescData = file_Net_Match3_proto_rawDesc
)

func file_Net_Match3_proto_rawDescGZIP() []byte {
	file_Net_Match3_proto_rawDescOnce.Do(func() {
		file_Net_Match3_proto_rawDescData = protoimpl.X.CompressGZIP(file_Net_Match3_proto_rawDescData)
	})
	return file_Net_Match3_proto_rawDescData
}

var file_Net_Match3_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_Net_Match3_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_Net_Match3_proto_goTypes = []interface{}{
	(Match3Game)(0),                                       // 0: Pb.Match3Game
	(*Base_Match3_Match3Info)(nil),                        // 1: Pb.Base_Match3_Match3Info
	(*Base_Match3_RoomInfo)(nil),                          // 2: Pb.Base_Match3_RoomInfo
	(*Base_Match3_SetChesses)(nil),                        // 3: Pb.Base_Match3_SetChesses
	(*Base_Match3_ChessboardInfo)(nil),                    // 4: Pb.Base_Match3_ChessboardInfo
	(*Base_Match3_HeroInfo)(nil),                          // 5: Pb.Base_Match3_HeroInfo
	(*Base_Match3_SkillBarInfo)(nil),                      // 6: Pb.Base_Match3_SkillBarInfo
	(*Base_Match3_ChessboardSkillInfo)(nil),               // 7: Pb.Base_Match3_ChessboardSkillInfo
	(*Base_Match3_HeroSkillInfo)(nil),                     // 8: Pb.Base_Match3_HeroSkillInfo
	(*Base_Match3_HeroSkillItemInfo)(nil),                 // 9: Pb.Base_Match3_HeroSkillItemInfo
	(*Base_Match3_HeroAttackInfo)(nil),                    // 10: Pb.Base_Match3_HeroAttackInfo
	(*Base_Match3_RoleInfo)(nil),                          // 11: Pb.Base_Match3_RoleInfo
	(*Base_Match3_RepeatInt)(nil),                         // 12: Pb.Base_Match3_RepeatInt
	(*Base_Match3_SimpleChess)(nil),                       // 13: Pb.Base_Match3_SimpleChess
	(*Base_Match3_Chess)(nil),                             // 14: Pb.Base_Match3_Chess
	(*Base_Match3_SupplyChesses)(nil),                     // 15: Pb.Base_Match3_SupplyChesses
	(*Base_Match3_JieSuanRoleInfo)(nil),                   // 16: Pb.Base_Match3_JieSuanRoleInfo
	(*Base_Match3_InterfereInfo)(nil),                     // 17: Pb.Base_Match3_InterfereInfo
	(*Net_Match3_InterfereReq)(nil),                       // 18: Pb.Net_Match3_InterfereReq
	(*Net_Match3_InterfereRet)(nil),                       // 19: Pb.Net_Match3_InterfereRet
	(*Net_Match3_StartMatchingRoomReq)(nil),               // 20: Pb.Net_Match3_StartMatchingRoomReq
	(*Net_Match3_StartMatchingRoomRet)(nil),               // 21: Pb.Net_Match3_StartMatchingRoomRet
	(*Net_Match3_CancelMatchingReq)(nil),                  // 22: Pb.Net_Match3_CancelMatchingReq
	(*Net_Match3_CancelMatchingRet)(nil),                  // 23: Pb.Net_Match3_CancelMatchingRet
	(*Net_Match3_OtherRoleEnterRoomRet)(nil),              // 24: Pb.Net_Match3_OtherRoleEnterRoomRet
	(*Net_Match3_StartMatchingRoomSuccessRet)(nil),        // 25: Pb.Net_Match3_StartMatchingRoomSuccessRet
	(*Net_Match3_GetSceneInformationReq)(nil),             // 26: Pb.Net_Match3_GetSceneInformationReq
	(*Net_Match3_GetSceneInformationRet)(nil),             // 27: Pb.Net_Match3_GetSceneInformationRet
	(*Net_Match3_CountdownRet)(nil),                       // 28: Pb.Net_Match3_CountdownRet
	(*Net_Match3_StartRet)(nil),                           // 29: Pb.Net_Match3_StartRet
	(*Net_Match3_NextMoveReq)(nil),                        // 30: Pb.Net_Match3_NextMoveReq
	(*Net_Match3_NextMoveRet)(nil),                        // 31: Pb.Net_Match3_NextMoveRet
	(*Base_Match3_AttackTargetHero)(nil),                  // 32: Pb.Base_Match3_AttackTargetHero
	(*Net_Match3_HeroAttackReq)(nil),                      // 33: Pb.Net_Match3_HeroAttackReq
	(*Net_Match3_HeroAttackRet)(nil),                      // 34: Pb.Net_Match3_HeroAttackRet
	(*Net_Match3_WaitOtherPlayerOfflineCountdownRet)(nil), // 35: Pb.Net_Match3_WaitOtherPlayerOfflineCountdownRet
	(*Net_Match3_RoleDeathJieSuanRet)(nil),                // 36: Pb.Net_Match3_RoleDeathJieSuanRet
	(*Net_Match3_GameOverRet)(nil),                        // 37: Pb.Net_Match3_GameOverRet
	(*Net_Match3_ExitRoomReq)(nil),                        // 38: Pb.Net_Match3_ExitRoomReq
	(*Net_Match3_ExitRoomRet)(nil),                        // 39: Pb.Net_Match3_ExitRoomRet
	(*Net_Match3_OtherRoleExitRoomRet)(nil),               // 40: Pb.Net_Match3_OtherRoleExitRoomRet
	(*Net_Match3_ReleaseSkillReq)(nil),                    // 41: Pb.Net_Match3_ReleaseSkillReq
	(*Net_Match3_ReleaseSkillRet)(nil),                    // 42: Pb.Net_Match3_ReleaseSkillRet
	(*Net_Match3_EnterRoomReq)(nil),                       // 43: Pb.Net_Match3_EnterRoomReq
	(*Net_Match3_EnterRoomRet)(nil),                       // 44: Pb.Net_Match3_EnterRoomRet
	(*Net_Match3_PrepareReq)(nil),                         // 45: Pb.Net_Match3_PrepareReq
	(*Net_Match3_PrepareRet)(nil),                         // 46: Pb.Net_Match3_PrepareRet
	(*Net_Match3_BuyTalentSkillReq)(nil),                  // 47: Pb.Net_Match3_BuyTalentSkillReq
	(*Net_Match3_BuyTalentSkillRet)(nil),                  // 48: Pb.Net_Match3_BuyTalentSkillRet
	(*Net_Match3_NextRoundOperationRet)(nil),              // 49: Pb.Net_Match3_NextRoundOperationRet
	nil,                                                   // 50: Pb.Base_Match3_RoomInfo.RoleListEntry
	nil,                                                   // 51: Pb.Base_Match3_SetChesses.ChangeChessesEntry
	nil,                                                   // 52: Pb.Base_Match3_ChessboardInfo.FirstEliminatedEntry
	nil,                                                   // 53: Pb.Base_Match3_ChessboardInfo.NextEliminatedEntry
	nil,                                                   // 54: Pb.Base_Match3_ChessboardInfo.SupplyChessesEntry
	nil,                                                   // 55: Pb.Base_Match3_ChessboardInfo.ChessGridEntry
	nil,                                                   // 56: Pb.Base_Match3_ChessboardInfo.ChangeChessesEntry
	nil,                                                   // 57: Pb.Base_Match3_ChessboardInfo.TargetChangeChessesEntry
	nil,                                                   // 58: Pb.Base_Match3_HeroSkillInfo.HeroSkillItemListEntry
	nil,                                                   // 59: Pb.Base_Match3_JieSuanRoleInfo.RewardItemListEntry
	nil,                                                   // 60: Pb.Net_Match3_GameOverRet.JieSuanEntry
}
var file_Net_Match3_proto_depIdxs = []int32{
	2,  // 0: Pb.Base_Match3_Match3Info.RoomInfo:type_name -> Pb.Base_Match3_RoomInfo
	50, // 1: Pb.Base_Match3_RoomInfo.RoleList:type_name -> Pb.Base_Match3_RoomInfo.RoleListEntry
	51, // 2: Pb.Base_Match3_SetChesses.ChangeChesses:type_name -> Pb.Base_Match3_SetChesses.ChangeChessesEntry
	52, // 3: Pb.Base_Match3_ChessboardInfo.FirstEliminated:type_name -> Pb.Base_Match3_ChessboardInfo.FirstEliminatedEntry
	53, // 4: Pb.Base_Match3_ChessboardInfo.NextEliminated:type_name -> Pb.Base_Match3_ChessboardInfo.NextEliminatedEntry
	54, // 5: Pb.Base_Match3_ChessboardInfo.SupplyChesses:type_name -> Pb.Base_Match3_ChessboardInfo.SupplyChessesEntry
	55, // 6: Pb.Base_Match3_ChessboardInfo.ChessGrid:type_name -> Pb.Base_Match3_ChessboardInfo.ChessGridEntry
	56, // 7: Pb.Base_Match3_ChessboardInfo.ChangeChesses:type_name -> Pb.Base_Match3_ChessboardInfo.ChangeChessesEntry
	57, // 8: Pb.Base_Match3_ChessboardInfo.TargetChangeChesses:type_name -> Pb.Base_Match3_ChessboardInfo.TargetChangeChessesEntry
	7,  // 9: Pb.Base_Match3_SkillBarInfo.ChessboardSkill1:type_name -> Pb.Base_Match3_ChessboardSkillInfo
	7,  // 10: Pb.Base_Match3_SkillBarInfo.ChessboardSkill2:type_name -> Pb.Base_Match3_ChessboardSkillInfo
	7,  // 11: Pb.Base_Match3_SkillBarInfo.ChessboardSkill3:type_name -> Pb.Base_Match3_ChessboardSkillInfo
	58, // 12: Pb.Base_Match3_HeroSkillInfo.HeroSkillItemList:type_name -> Pb.Base_Match3_HeroSkillInfo.HeroSkillItemListEntry
	5,  // 13: Pb.Base_Match3_RoleInfo.HeroInfo:type_name -> Pb.Base_Match3_HeroInfo
	6,  // 14: Pb.Base_Match3_RoleInfo.SkillBarInfo:type_name -> Pb.Base_Match3_SkillBarInfo
	4,  // 15: Pb.Base_Match3_RoleInfo.ChessboardInfo:type_name -> Pb.Base_Match3_ChessboardInfo
	13, // 16: Pb.Base_Match3_SupplyChesses.SupplyChesses:type_name -> Pb.Base_Match3_SimpleChess
	59, // 17: Pb.Base_Match3_JieSuanRoleInfo.RewardItemList:type_name -> Pb.Base_Match3_JieSuanRoleInfo.RewardItemListEntry
	17, // 18: Pb.Net_Match3_InterfereReq.InterfereInfo:type_name -> Pb.Base_Match3_InterfereInfo
	17, // 19: Pb.Net_Match3_InterfereRet.InterfereInfo:type_name -> Pb.Base_Match3_InterfereInfo
	11, // 20: Pb.Net_Match3_OtherRoleEnterRoomRet.OtherRole:type_name -> Pb.Base_Match3_RoleInfo
	2,  // 21: Pb.Net_Match3_StartMatchingRoomSuccessRet.RoomInfo:type_name -> Pb.Base_Match3_RoomInfo
	2,  // 22: Pb.Net_Match3_GetSceneInformationRet.RoomInfo:type_name -> Pb.Base_Match3_RoomInfo
	4,  // 23: Pb.Net_Match3_NextMoveReq.ChessboardInfo:type_name -> Pb.Base_Match3_ChessboardInfo
	5,  // 24: Pb.Net_Match3_NextMoveReq.HeroInfo:type_name -> Pb.Base_Match3_HeroInfo
	4,  // 25: Pb.Net_Match3_NextMoveRet.ChessboardInfo:type_name -> Pb.Base_Match3_ChessboardInfo
	5,  // 26: Pb.Net_Match3_NextMoveRet.HeroInfo:type_name -> Pb.Base_Match3_HeroInfo
	32, // 27: Pb.Net_Match3_HeroAttackReq.AttackTargetHeroList:type_name -> Pb.Base_Match3_AttackTargetHero
	32, // 28: Pb.Net_Match3_HeroAttackRet.AttackTargetHeroList:type_name -> Pb.Base_Match3_AttackTargetHero
	16, // 29: Pb.Net_Match3_RoleDeathJieSuanRet.JieSuanRoleInfo:type_name -> Pb.Base_Match3_JieSuanRoleInfo
	60, // 30: Pb.Net_Match3_GameOverRet.JieSuan:type_name -> Pb.Net_Match3_GameOverRet.JieSuanEntry
	2,  // 31: Pb.Net_Match3_EnterRoomRet.RoomInfo:type_name -> Pb.Base_Match3_RoomInfo
	11, // 32: Pb.Base_Match3_RoomInfo.RoleListEntry.value:type_name -> Pb.Base_Match3_RoleInfo
	14, // 33: Pb.Base_Match3_SetChesses.ChangeChessesEntry.value:type_name -> Pb.Base_Match3_Chess
	12, // 34: Pb.Base_Match3_ChessboardInfo.FirstEliminatedEntry.value:type_name -> Pb.Base_Match3_RepeatInt
	12, // 35: Pb.Base_Match3_ChessboardInfo.NextEliminatedEntry.value:type_name -> Pb.Base_Match3_RepeatInt
	15, // 36: Pb.Base_Match3_ChessboardInfo.SupplyChessesEntry.value:type_name -> Pb.Base_Match3_SupplyChesses
	14, // 37: Pb.Base_Match3_ChessboardInfo.ChessGridEntry.value:type_name -> Pb.Base_Match3_Chess
	14, // 38: Pb.Base_Match3_ChessboardInfo.ChangeChessesEntry.value:type_name -> Pb.Base_Match3_Chess
	3,  // 39: Pb.Base_Match3_ChessboardInfo.TargetChangeChessesEntry.value:type_name -> Pb.Base_Match3_SetChesses
	9,  // 40: Pb.Base_Match3_HeroSkillInfo.HeroSkillItemListEntry.value:type_name -> Pb.Base_Match3_HeroSkillItemInfo
	16, // 41: Pb.Net_Match3_GameOverRet.JieSuanEntry.value:type_name -> Pb.Base_Match3_JieSuanRoleInfo
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_Net_Match3_proto_init() }
func file_Net_Match3_proto_init() {
	if File_Net_Match3_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Net_Match3_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Match3_Match3Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Match3_RoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Match3_SetChesses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Match3_ChessboardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Match3_HeroInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Match3_SkillBarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Match3_ChessboardSkillInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Match3_HeroSkillInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Match3_HeroSkillItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Match3_HeroAttackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Match3_RoleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Match3_RepeatInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Match3_SimpleChess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Match3_Chess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Match3_SupplyChesses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Match3_JieSuanRoleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Match3_InterfereInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_InterfereReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_InterfereRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_StartMatchingRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_StartMatchingRoomRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_CancelMatchingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_CancelMatchingRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_OtherRoleEnterRoomRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_StartMatchingRoomSuccessRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_GetSceneInformationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_GetSceneInformationRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_CountdownRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_StartRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_NextMoveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_NextMoveRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Match3_AttackTargetHero); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_HeroAttackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_HeroAttackRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_WaitOtherPlayerOfflineCountdownRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_RoleDeathJieSuanRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_GameOverRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_ExitRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_ExitRoomRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_OtherRoleExitRoomRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_ReleaseSkillReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_ReleaseSkillRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_EnterRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_EnterRoomRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_PrepareReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_PrepareRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_BuyTalentSkillReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_BuyTalentSkillRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Match3_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Match3_NextRoundOperationRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Net_Match3_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Net_Match3_proto_goTypes,
		DependencyIndexes: file_Net_Match3_proto_depIdxs,
		EnumInfos:         file_Net_Match3_proto_enumTypes,
		MessageInfos:      file_Net_Match3_proto_msgTypes,
	}.Build()
	File_Net_Match3_proto = out.File
	file_Net_Match3_proto_rawDesc = nil
	file_Net_Match3_proto_goTypes = nil
	file_Net_Match3_proto_depIdxs = nil
}
