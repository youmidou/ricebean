// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.23.1
// source: Net_Player.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 玩家修改标记
type PlayerMark int32

const (
	PlayerMark_PlayerMarkIdle PlayerMark = 0
	PlayerMark_Coins          PlayerMark = 1 //金币
	PlayerMark_Golds          PlayerMark = 2 //钻石
	PlayerMark_HolyGrails     PlayerMark = 3 //奖杯
	// LuckyWheelCoin =4;//幸运轮金币
	// -------功能模块标记--------------------
	// BackpackMark =6;//背包标记
	// ActivityMark =7;//玩家活动标记
	// TaskMark =8;//玩家任务标记
	PlayerMark_LoginBonusMark PlayerMark = 9  //每日签到奖励
	PlayerMark_DailyBonusMark PlayerMark = 10 //每日奖金
	PlayerMark_StoreMark      PlayerMark = 11 //商店标记
)

// Enum value maps for PlayerMark.
var (
	PlayerMark_name = map[int32]string{
		0:  "PlayerMarkIdle",
		1:  "Coins",
		2:  "Golds",
		3:  "HolyGrails",
		9:  "LoginBonusMark",
		10: "DailyBonusMark",
		11: "StoreMark",
	}
	PlayerMark_value = map[string]int32{
		"PlayerMarkIdle": 0,
		"Coins":          1,
		"Golds":          2,
		"HolyGrails":     3,
		"LoginBonusMark": 9,
		"DailyBonusMark": 10,
		"StoreMark":      11,
	}
)

func (x PlayerMark) Enum() *PlayerMark {
	p := new(PlayerMark)
	*p = x
	return p
}

func (x PlayerMark) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerMark) Descriptor() protoreflect.EnumDescriptor {
	return file_Net_Player_proto_enumTypes[0].Descriptor()
}

func (PlayerMark) Type() protoreflect.EnumType {
	return &file_Net_Player_proto_enumTypes[0]
}

func (x PlayerMark) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerMark.Descriptor instead.
func (PlayerMark) EnumDescriptor() ([]byte, []int) {
	return file_Net_Player_proto_rawDescGZIP(), []int{0}
}

// 用户->玩家 Player信息列表
//
// added by yh @ 2023/11/30 10:29
// 注意:
type Base_Player_PlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo     *Base_Player_PlayerInfo       `protobuf:"bytes,1,opt,name=PlayerInfo,proto3" json:"PlayerInfo,omitempty"`          //玩家Id
	MoneyInfo      *Base_Player_MoneyInfo        `protobuf:"bytes,10,opt,name=MoneyInfo,proto3" json:"MoneyInfo,omitempty"`           //钱包信息
	BackpackInfo   *Base_Backpack_BackpackInfo   `protobuf:"bytes,11,opt,name=BackpackInfo,proto3" json:"BackpackInfo,omitempty"`     //背包信息
	LoginBonusInfo *Base_Player_LoginBonusInfo   `protobuf:"bytes,12,opt,name=LoginBonusInfo,proto3" json:"LoginBonusInfo,omitempty"` //每日签到奖励
	DailyBonusInfo *Base_Player_DailyBonusInfo   `protobuf:"bytes,13,opt,name=DailyBonusInfo,proto3" json:"DailyBonusInfo,omitempty"` //每日奖金
	VipInfo        *Base_Vip_VipInfo             `protobuf:"bytes,14,opt,name=VipInfo,proto3" json:"VipInfo,omitempty"`               //vip信息
	ActivityInfo   *Base_Activity_ActivityInfo   `protobuf:"bytes,15,opt,name=ActivityInfo,proto3" json:"ActivityInfo,omitempty"`     //每日任务活动
	ThemeInfo      *Base_Player_ThemeInfo        `protobuf:"bytes,16,opt,name=ThemeInfo,proto3" json:"ThemeInfo,omitempty"`           //主题信息
	ShopInfo       *Base_Shop_ShopInfo           `protobuf:"bytes,17,opt,name=ShopInfo,proto3" json:"ShopInfo,omitempty"`             //商店信息
	InboxInfo      *Base_Inbox_InboxInfo         `protobuf:"bytes,18,opt,name=InboxInfo,proto3" json:"InboxInfo,omitempty"`           //收件箱信息
	HeroCardInfo   *Base_HeroCard_HeroCardInfo   `protobuf:"bytes,19,opt,name=HeroCardInfo,proto3" json:"HeroCardInfo,omitempty"`     //英雄信息
	TaskInfo       *Base_Task_TaskInfo           `protobuf:"bytes,20,opt,name=TaskInfo,proto3" json:"TaskInfo,omitempty"`             //任务
	CupTaskInfo    *Base_Task_CupTaskInfo        `protobuf:"bytes,21,opt,name=CupTaskInfo,proto3" json:"CupTaskInfo,omitempty"`       //奖杯任务 未整合的
	PassCheckInfo  *Base_PassCheck_PassCheckInfo `protobuf:"bytes,24,opt,name=PassCheckInfo,proto3" json:"PassCheckInfo,omitempty"`   //通行证信息
	GuideInfo      *Base_Guide_GuideInfo         `protobuf:"bytes,25,opt,name=GuideInfo,proto3" json:"GuideInfo,omitempty"`           //新手引导
	Match3Info     *Base_Match3_Match3Info       `protobuf:"bytes,26,opt,name=Match3Info,proto3" json:"Match3Info,omitempty"`         //3消主题信息
}

func (x *Base_Player_PlayerData) Reset() {
	*x = Base_Player_PlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Player_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Player_PlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Player_PlayerData) ProtoMessage() {}

func (x *Base_Player_PlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Player_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Player_PlayerData.ProtoReflect.Descriptor instead.
func (*Base_Player_PlayerData) Descriptor() ([]byte, []int) {
	return file_Net_Player_proto_rawDescGZIP(), []int{0}
}

func (x *Base_Player_PlayerData) GetPlayerInfo() *Base_Player_PlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *Base_Player_PlayerData) GetMoneyInfo() *Base_Player_MoneyInfo {
	if x != nil {
		return x.MoneyInfo
	}
	return nil
}

func (x *Base_Player_PlayerData) GetBackpackInfo() *Base_Backpack_BackpackInfo {
	if x != nil {
		return x.BackpackInfo
	}
	return nil
}

func (x *Base_Player_PlayerData) GetLoginBonusInfo() *Base_Player_LoginBonusInfo {
	if x != nil {
		return x.LoginBonusInfo
	}
	return nil
}

func (x *Base_Player_PlayerData) GetDailyBonusInfo() *Base_Player_DailyBonusInfo {
	if x != nil {
		return x.DailyBonusInfo
	}
	return nil
}

func (x *Base_Player_PlayerData) GetVipInfo() *Base_Vip_VipInfo {
	if x != nil {
		return x.VipInfo
	}
	return nil
}

func (x *Base_Player_PlayerData) GetActivityInfo() *Base_Activity_ActivityInfo {
	if x != nil {
		return x.ActivityInfo
	}
	return nil
}

func (x *Base_Player_PlayerData) GetThemeInfo() *Base_Player_ThemeInfo {
	if x != nil {
		return x.ThemeInfo
	}
	return nil
}

func (x *Base_Player_PlayerData) GetShopInfo() *Base_Shop_ShopInfo {
	if x != nil {
		return x.ShopInfo
	}
	return nil
}

func (x *Base_Player_PlayerData) GetInboxInfo() *Base_Inbox_InboxInfo {
	if x != nil {
		return x.InboxInfo
	}
	return nil
}

func (x *Base_Player_PlayerData) GetHeroCardInfo() *Base_HeroCard_HeroCardInfo {
	if x != nil {
		return x.HeroCardInfo
	}
	return nil
}

func (x *Base_Player_PlayerData) GetTaskInfo() *Base_Task_TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

func (x *Base_Player_PlayerData) GetCupTaskInfo() *Base_Task_CupTaskInfo {
	if x != nil {
		return x.CupTaskInfo
	}
	return nil
}

func (x *Base_Player_PlayerData) GetPassCheckInfo() *Base_PassCheck_PassCheckInfo {
	if x != nil {
		return x.PassCheckInfo
	}
	return nil
}

func (x *Base_Player_PlayerData) GetGuideInfo() *Base_Guide_GuideInfo {
	if x != nil {
		return x.GuideInfo
	}
	return nil
}

func (x *Base_Player_PlayerData) GetMatch3Info() *Base_Match3_Match3Info {
	if x != nil {
		return x.Match3Info
	}
	return nil
}

type Base_Player_PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId    string `protobuf:"bytes,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`        //玩家Id
	NickName    string `protobuf:"bytes,2,opt,name=NickName,proto3" json:"NickName,omitempty"`        //玩家名称
	Level       int32  `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`             //等级
	Exp         int32  `protobuf:"varint,4,opt,name=Exp,proto3" json:"Exp,omitempty"`                 //经验
	ExpLimit    int32  `protobuf:"varint,5,opt,name=ExpLimit,proto3" json:"ExpLimit,omitempty"`       //经验上限
	Coin        int32  `protobuf:"varint,6,opt,name=Coin,proto3" json:"Coin,omitempty"`               //金币
	Gold        int32  `protobuf:"varint,7,opt,name=Gold,proto3" json:"Gold,omitempty"`               //钻石
	HolyGrail   int32  `protobuf:"varint,8,opt,name=HolyGrail,proto3" json:"HolyGrail,omitempty"`     //圣杯
	IsNewPlayer int32  `protobuf:"varint,9,opt,name=IsNewPlayer,proto3" json:"IsNewPlayer,omitempty"` //是否是新玩家
}

func (x *Base_Player_PlayerInfo) Reset() {
	*x = Base_Player_PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Player_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Player_PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Player_PlayerInfo) ProtoMessage() {}

func (x *Base_Player_PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Player_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Player_PlayerInfo.ProtoReflect.Descriptor instead.
func (*Base_Player_PlayerInfo) Descriptor() ([]byte, []int) {
	return file_Net_Player_proto_rawDescGZIP(), []int{1}
}

func (x *Base_Player_PlayerInfo) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *Base_Player_PlayerInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *Base_Player_PlayerInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Base_Player_PlayerInfo) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *Base_Player_PlayerInfo) GetExpLimit() int32 {
	if x != nil {
		return x.ExpLimit
	}
	return 0
}

func (x *Base_Player_PlayerInfo) GetCoin() int32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *Base_Player_PlayerInfo) GetGold() int32 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *Base_Player_PlayerInfo) GetHolyGrail() int32 {
	if x != nil {
		return x.HolyGrail
	}
	return 0
}

func (x *Base_Player_PlayerInfo) GetIsNewPlayer() int32 {
	if x != nil {
		return x.IsNewPlayer
	}
	return 0
}

// 每日登陆奖励
type Base_Player_LoginBonusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckIn      int32   `protobuf:"varint,1,opt,name=CheckIn,proto3" json:"CheckIn,omitempty"`                //今天是否已经签到 1:签到;0:未签到；
	TypeWeek     int32   `protobuf:"varint,2,opt,name=TypeWeek,proto3" json:"TypeWeek,omitempty"`              //周类型 一个类型7天
	WeeklyCount  int32   `protobuf:"varint,3,opt,name=WeeklyCount,proto3" json:"WeeklyCount,omitempty"`        //每周计数
	MonthlyCount int32   `protobuf:"varint,4,opt,name=MonthlyCount,proto3" json:"MonthlyCount,omitempty"`      //每月计数
	MonthStatus  []int32 `protobuf:"varint,5,rep,packed,name=MonthStatus,proto3" json:"MonthStatus,omitempty"` //周奖励状态 用于前端展示
}

func (x *Base_Player_LoginBonusInfo) Reset() {
	*x = Base_Player_LoginBonusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Player_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Player_LoginBonusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Player_LoginBonusInfo) ProtoMessage() {}

func (x *Base_Player_LoginBonusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Player_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Player_LoginBonusInfo.ProtoReflect.Descriptor instead.
func (*Base_Player_LoginBonusInfo) Descriptor() ([]byte, []int) {
	return file_Net_Player_proto_rawDescGZIP(), []int{2}
}

func (x *Base_Player_LoginBonusInfo) GetCheckIn() int32 {
	if x != nil {
		return x.CheckIn
	}
	return 0
}

func (x *Base_Player_LoginBonusInfo) GetTypeWeek() int32 {
	if x != nil {
		return x.TypeWeek
	}
	return 0
}

func (x *Base_Player_LoginBonusInfo) GetWeeklyCount() int32 {
	if x != nil {
		return x.WeeklyCount
	}
	return 0
}

func (x *Base_Player_LoginBonusInfo) GetMonthlyCount() int32 {
	if x != nil {
		return x.MonthlyCount
	}
	return 0
}

func (x *Base_Player_LoginBonusInfo) GetMonthStatus() []int32 {
	if x != nil {
		return x.MonthStatus
	}
	return nil
}

// 主题信息
type Base_Player_ThemeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Base_Player_ThemeInfo) Reset() {
	*x = Base_Player_ThemeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Player_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Player_ThemeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Player_ThemeInfo) ProtoMessage() {}

func (x *Base_Player_ThemeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Player_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Player_ThemeInfo.ProtoReflect.Descriptor instead.
func (*Base_Player_ThemeInfo) Descriptor() ([]byte, []int) {
	return file_Net_Player_proto_rawDescGZIP(), []int{3}
}

// 每日奖金
type Base_Player_DailyBonusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DailyBonusStatus []int32 `protobuf:"varint,1,rep,packed,name=DailyBonusStatus,proto3" json:"DailyBonusStatus,omitempty"` //每日奖励领取
}

func (x *Base_Player_DailyBonusInfo) Reset() {
	*x = Base_Player_DailyBonusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Player_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Player_DailyBonusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Player_DailyBonusInfo) ProtoMessage() {}

func (x *Base_Player_DailyBonusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Player_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Player_DailyBonusInfo.ProtoReflect.Descriptor instead.
func (*Base_Player_DailyBonusInfo) Descriptor() ([]byte, []int) {
	return file_Net_Player_proto_rawDescGZIP(), []int{4}
}

func (x *Base_Player_DailyBonusInfo) GetDailyBonusStatus() []int32 {
	if x != nil {
		return x.DailyBonusStatus
	}
	return nil
}

// 玩家属性标记
type Base_Player_PlayerMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeType  int32 `protobuf:"varint,1,opt,name=AttributeType,proto3" json:"AttributeType,omitempty"`   //货币类型
	AttributeValue int32 `protobuf:"varint,2,opt,name=AttributeValue,proto3" json:"AttributeValue,omitempty"` //货币值
}

func (x *Base_Player_PlayerMark) Reset() {
	*x = Base_Player_PlayerMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Player_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Player_PlayerMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Player_PlayerMark) ProtoMessage() {}

func (x *Base_Player_PlayerMark) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Player_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Player_PlayerMark.ProtoReflect.Descriptor instead.
func (*Base_Player_PlayerMark) Descriptor() ([]byte, []int) {
	return file_Net_Player_proto_rawDescGZIP(), []int{5}
}

func (x *Base_Player_PlayerMark) GetAttributeType() int32 {
	if x != nil {
		return x.AttributeType
	}
	return 0
}

func (x *Base_Player_PlayerMark) GetAttributeValue() int32 {
	if x != nil {
		return x.AttributeValue
	}
	return 0
}

// 玩家->钱包信息
type Base_Player_MoneyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gold           int32 `protobuf:"varint,1,opt,name=Gold,proto3" json:"Gold,omitempty"`                     //钻石
	GoldBind       int32 `protobuf:"varint,2,opt,name=GoldBind,proto3" json:"GoldBind,omitempty"`             //绑定钻石
	Coin           int32 `protobuf:"varint,3,opt,name=Coin,proto3" json:"Coin,omitempty"`                     //金币
	CoinBind       int32 `protobuf:"varint,4,opt,name=CoinBind,proto3" json:"CoinBind,omitempty"`             //绑定金币
	HolyGrail      int32 `protobuf:"varint,5,opt,name=HolyGrail,proto3" json:"HolyGrail,omitempty"`           //奖杯币
	LuckyWheelCoin int32 `protobuf:"varint,6,opt,name=LuckyWheelCoin,proto3" json:"LuckyWheelCoin,omitempty"` //幸运轮币
}

func (x *Base_Player_MoneyInfo) Reset() {
	*x = Base_Player_MoneyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Player_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base_Player_MoneyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base_Player_MoneyInfo) ProtoMessage() {}

func (x *Base_Player_MoneyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Player_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base_Player_MoneyInfo.ProtoReflect.Descriptor instead.
func (*Base_Player_MoneyInfo) Descriptor() ([]byte, []int) {
	return file_Net_Player_proto_rawDescGZIP(), []int{6}
}

func (x *Base_Player_MoneyInfo) GetGold() int32 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *Base_Player_MoneyInfo) GetGoldBind() int32 {
	if x != nil {
		return x.GoldBind
	}
	return 0
}

func (x *Base_Player_MoneyInfo) GetCoin() int32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *Base_Player_MoneyInfo) GetCoinBind() int32 {
	if x != nil {
		return x.CoinBind
	}
	return 0
}

func (x *Base_Player_MoneyInfo) GetHolyGrail() int32 {
	if x != nil {
		return x.HolyGrail
	}
	return 0
}

func (x *Base_Player_MoneyInfo) GetLuckyWheelCoin() int32 {
	if x != nil {
		return x.LuckyWheelCoin
	}
	return 0
}

// 主动更新玩家货币信息
type Net_Player_UpdateMoneyInfoRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoneyInfo *Base_Player_MoneyInfo `protobuf:"bytes,1,opt,name=MoneyInfo,proto3" json:"MoneyInfo,omitempty"` //玩家钱包
}

func (x *Net_Player_UpdateMoneyInfoRet) Reset() {
	*x = Net_Player_UpdateMoneyInfoRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Player_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Player_UpdateMoneyInfoRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Player_UpdateMoneyInfoRet) ProtoMessage() {}

func (x *Net_Player_UpdateMoneyInfoRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Player_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Player_UpdateMoneyInfoRet.ProtoReflect.Descriptor instead.
func (*Net_Player_UpdateMoneyInfoRet) Descriptor() ([]byte, []int) {
	return file_Net_Player_proto_rawDescGZIP(), []int{7}
}

func (x *Net_Player_UpdateMoneyInfoRet) GetMoneyInfo() *Base_Player_MoneyInfo {
	if x != nil {
		return x.MoneyInfo
	}
	return nil
}

// 玩家更新信息有变更走这里
type Net_Player_PlayerUpdatesInfoRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerMarkList map[int32]*Base_Player_PlayerMark `protobuf:"bytes,1,rep,name=PlayerMarkList,proto3" json:"PlayerMarkList,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //货币更新列表
	HeroCardInfo   *Base_HeroCard_HeroCardInfo       `protobuf:"bytes,2,opt,name=HeroCardInfo,proto3" json:"HeroCardInfo,omitempty"`                                                                                              //英雄卡牌信息
	ActivityInfo   *Base_Activity_ActivityInfo       `protobuf:"bytes,3,opt,name=ActivityInfo,proto3" json:"ActivityInfo,omitempty"`                                                                                              //每日任务活动
	TaskInfo       *Base_Task_TaskInfo               `protobuf:"bytes,4,opt,name=TaskInfo,proto3" json:"TaskInfo,omitempty"`                                                                                                      //任务
}

func (x *Net_Player_PlayerUpdatesInfoRet) Reset() {
	*x = Net_Player_PlayerUpdatesInfoRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Player_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Player_PlayerUpdatesInfoRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Player_PlayerUpdatesInfoRet) ProtoMessage() {}

func (x *Net_Player_PlayerUpdatesInfoRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Player_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Player_PlayerUpdatesInfoRet.ProtoReflect.Descriptor instead.
func (*Net_Player_PlayerUpdatesInfoRet) Descriptor() ([]byte, []int) {
	return file_Net_Player_proto_rawDescGZIP(), []int{8}
}

func (x *Net_Player_PlayerUpdatesInfoRet) GetPlayerMarkList() map[int32]*Base_Player_PlayerMark {
	if x != nil {
		return x.PlayerMarkList
	}
	return nil
}

func (x *Net_Player_PlayerUpdatesInfoRet) GetHeroCardInfo() *Base_HeroCard_HeroCardInfo {
	if x != nil {
		return x.HeroCardInfo
	}
	return nil
}

func (x *Net_Player_PlayerUpdatesInfoRet) GetActivityInfo() *Base_Activity_ActivityInfo {
	if x != nil {
		return x.ActivityInfo
	}
	return nil
}

func (x *Net_Player_PlayerUpdatesInfoRet) GetTaskInfo() *Base_Task_TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

// 更换名字
type Net_Player_ChangeNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NickName string `protobuf:"bytes,1,opt,name=NickName,proto3" json:"NickName,omitempty"` //昵称
}

func (x *Net_Player_ChangeNameReq) Reset() {
	*x = Net_Player_ChangeNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Player_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Player_ChangeNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Player_ChangeNameReq) ProtoMessage() {}

func (x *Net_Player_ChangeNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Player_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Player_ChangeNameReq.ProtoReflect.Descriptor instead.
func (*Net_Player_ChangeNameReq) Descriptor() ([]byte, []int) {
	return file_Net_Player_proto_rawDescGZIP(), []int{9}
}

func (x *Net_Player_ChangeNameReq) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

// 更换名字
type Net_Player_ChangeNameRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      int32  `protobuf:"varint,1,opt,name=Ret,proto3" json:"Ret,omitempty"`          //0:成功;1:失败;
	NickName string `protobuf:"bytes,2,opt,name=NickName,proto3" json:"NickName,omitempty"` //昵称
}

func (x *Net_Player_ChangeNameRet) Reset() {
	*x = Net_Player_ChangeNameRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Net_Player_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Player_ChangeNameRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Player_ChangeNameRet) ProtoMessage() {}

func (x *Net_Player_ChangeNameRet) ProtoReflect() protoreflect.Message {
	mi := &file_Net_Player_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Player_ChangeNameRet.ProtoReflect.Descriptor instead.
func (*Net_Player_ChangeNameRet) Descriptor() ([]byte, []int) {
	return file_Net_Player_proto_rawDescGZIP(), []int{10}
}

func (x *Net_Player_ChangeNameRet) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *Net_Player_ChangeNameRet) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

var File_Net_Player_proto protoreflect.FileDescriptor

var file_Net_Player_proto_rawDesc = []byte{
	0x0a, 0x10, 0x4e, 0x65, 0x74, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x50, 0x62, 0x1a, 0x12, 0x4e, 0x65, 0x74, 0x5f, 0x42, 0x61, 0x63, 0x6b,
	0x70, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x4e, 0x65, 0x74, 0x5f,
	0x53, 0x68, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x4e, 0x65, 0x74, 0x5f,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e,
	0x4e, 0x65, 0x74, 0x5f, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x4e, 0x65, 0x74, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x4e, 0x65, 0x74, 0x5f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x4e, 0x65, 0x74, 0x5f, 0x47, 0x75, 0x69, 0x64, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x4e, 0x65, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x4e, 0x65, 0x74, 0x5f, 0x48, 0x65, 0x72,
	0x6f, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x4e, 0x65, 0x74,
	0x5f, 0x56, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x07, 0x0a, 0x16, 0x42,
	0x61, 0x73, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x50, 0x62, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x37, 0x0a, 0x09, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0c, 0x42, 0x61,
	0x63, 0x6b, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x42, 0x61, 0x63, 0x6b, 0x70,
	0x61, 0x63, 0x6b, 0x5f, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46,
	0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e,
	0x0a, 0x07, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x56, 0x69, 0x70, 0x5f, 0x56, 0x69,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42,
	0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x37, 0x0a, 0x09, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x08, 0x53,
	0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x53, 0x68, 0x6f, 0x70, 0x5f, 0x53, 0x68, 0x6f,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x36, 0x0a, 0x09, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x49, 0x6e, 0x62,
	0x6f, 0x78, 0x5f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x49, 0x6e,
	0x62, 0x6f, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0c, 0x48, 0x65, 0x72, 0x6f, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x61, 0x72, 0x64,
	0x5f, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x48,
	0x65, 0x72, 0x6f, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x61, 0x73, 0x6b, 0x5f, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3b, 0x0a, 0x0b, 0x43, 0x75, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x54,
	0x61, 0x73, 0x6b, 0x5f, 0x43, 0x75, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x43, 0x75, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0d,
	0x50, 0x61, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x50, 0x61,
	0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x50, 0x61, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x09, 0x47, 0x75, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x5f, 0x47, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x47, 0x75, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x47, 0x75, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0a,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x33, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x33, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x33, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xfc, 0x01, 0x0a, 0x16, 0x42, 0x61, 0x73,
	0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x45, 0x78, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x78, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43,
	0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x6f, 0x6c, 0x79, 0x47,
	0x72, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x6f, 0x6c, 0x79,
	0x47, 0x72, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x49, 0x73, 0x4e, 0x65,
	0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0xba, 0x01, 0x0a, 0x1a, 0x42, 0x61, 0x73, 0x65,
	0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x54, 0x79, 0x70, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x20, 0x0a, 0x0b,
	0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x48, 0x0a,
	0x1a, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x66, 0x0a, 0x16, 0x42, 0x61, 0x73, 0x65, 0x5f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x72,
	0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xbd, 0x01, 0x0a, 0x15, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x6f, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x47, 0x6f, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x47, 0x6f, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x6f, 0x6c,
	0x79, 0x47, 0x72, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x6f,
	0x6c, 0x79, 0x47, 0x72, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x75, 0x63, 0x6b, 0x79,
	0x57, 0x68, 0x65, 0x65, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x22,
	0x58, 0x0a, 0x1d, 0x4e, 0x65, 0x74, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x74,
	0x12, 0x37, 0x0a, 0x09, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9d, 0x03, 0x0a, 0x1f, 0x4e, 0x65,
	0x74, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x74, 0x12, 0x5f, 0x0a,
	0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x50, 0x62, 0x2e, 0x4e, 0x65, 0x74, 0x5f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4d, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42,
	0x0a, 0x0c, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x48,
	0x65, 0x72, 0x6f, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x5f, 0x54, 0x61, 0x73, 0x6b, 0x5f, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x5d, 0x0a, 0x13, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x50, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x36, 0x0a, 0x18, 0x4e, 0x65, 0x74,
	0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x48, 0x0a, 0x18, 0x4e, 0x65, 0x74, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x2a, 0x7d, 0x0a, 0x0a, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x6f, 0x6c, 0x64,
	0x73, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x6f, 0x6c, 0x79, 0x47, 0x72, 0x61, 0x69, 0x6c,
	0x73, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x4d, 0x61, 0x72, 0x6b, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x10, 0x0b, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Net_Player_proto_rawDescOnce sync.Once
	file_Net_Player_proto_rawDescData = file_Net_Player_proto_rawDesc
)

func file_Net_Player_proto_rawDescGZIP() []byte {
	file_Net_Player_proto_rawDescOnce.Do(func() {
		file_Net_Player_proto_rawDescData = protoimpl.X.CompressGZIP(file_Net_Player_proto_rawDescData)
	})
	return file_Net_Player_proto_rawDescData
}

var file_Net_Player_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_Net_Player_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_Net_Player_proto_goTypes = []interface{}{
	(PlayerMark)(0),                         // 0: Pb.PlayerMark
	(*Base_Player_PlayerData)(nil),          // 1: Pb.Base_Player_PlayerData
	(*Base_Player_PlayerInfo)(nil),          // 2: Pb.Base_Player_PlayerInfo
	(*Base_Player_LoginBonusInfo)(nil),      // 3: Pb.Base_Player_LoginBonusInfo
	(*Base_Player_ThemeInfo)(nil),           // 4: Pb.Base_Player_ThemeInfo
	(*Base_Player_DailyBonusInfo)(nil),      // 5: Pb.Base_Player_DailyBonusInfo
	(*Base_Player_PlayerMark)(nil),          // 6: Pb.Base_Player_PlayerMark
	(*Base_Player_MoneyInfo)(nil),           // 7: Pb.Base_Player_MoneyInfo
	(*Net_Player_UpdateMoneyInfoRet)(nil),   // 8: Pb.Net_Player_UpdateMoneyInfoRet
	(*Net_Player_PlayerUpdatesInfoRet)(nil), // 9: Pb.Net_Player_PlayerUpdatesInfoRet
	(*Net_Player_ChangeNameReq)(nil),        // 10: Pb.Net_Player_ChangeNameReq
	(*Net_Player_ChangeNameRet)(nil),        // 11: Pb.Net_Player_ChangeNameRet
	nil,                                     // 12: Pb.Net_Player_PlayerUpdatesInfoRet.PlayerMarkListEntry
	(*Base_Backpack_BackpackInfo)(nil),      // 13: Pb.Base_Backpack_BackpackInfo
	(*Base_Vip_VipInfo)(nil),                // 14: Pb.Base_Vip_VipInfo
	(*Base_Activity_ActivityInfo)(nil),      // 15: Pb.Base_Activity_ActivityInfo
	(*Base_Shop_ShopInfo)(nil),              // 16: Pb.Base_Shop_ShopInfo
	(*Base_Inbox_InboxInfo)(nil),            // 17: Pb.Base_Inbox_InboxInfo
	(*Base_HeroCard_HeroCardInfo)(nil),      // 18: Pb.Base_HeroCard_HeroCardInfo
	(*Base_Task_TaskInfo)(nil),              // 19: Pb.Base_Task_TaskInfo
	(*Base_Task_CupTaskInfo)(nil),           // 20: Pb.Base_Task_CupTaskInfo
	(*Base_PassCheck_PassCheckInfo)(nil),    // 21: Pb.Base_PassCheck_PassCheckInfo
	(*Base_Guide_GuideInfo)(nil),            // 22: Pb.Base_Guide_GuideInfo
	(*Base_Match3_Match3Info)(nil),          // 23: Pb.Base_Match3_Match3Info
}
var file_Net_Player_proto_depIdxs = []int32{
	2,  // 0: Pb.Base_Player_PlayerData.PlayerInfo:type_name -> Pb.Base_Player_PlayerInfo
	7,  // 1: Pb.Base_Player_PlayerData.MoneyInfo:type_name -> Pb.Base_Player_MoneyInfo
	13, // 2: Pb.Base_Player_PlayerData.BackpackInfo:type_name -> Pb.Base_Backpack_BackpackInfo
	3,  // 3: Pb.Base_Player_PlayerData.LoginBonusInfo:type_name -> Pb.Base_Player_LoginBonusInfo
	5,  // 4: Pb.Base_Player_PlayerData.DailyBonusInfo:type_name -> Pb.Base_Player_DailyBonusInfo
	14, // 5: Pb.Base_Player_PlayerData.VipInfo:type_name -> Pb.Base_Vip_VipInfo
	15, // 6: Pb.Base_Player_PlayerData.ActivityInfo:type_name -> Pb.Base_Activity_ActivityInfo
	4,  // 7: Pb.Base_Player_PlayerData.ThemeInfo:type_name -> Pb.Base_Player_ThemeInfo
	16, // 8: Pb.Base_Player_PlayerData.ShopInfo:type_name -> Pb.Base_Shop_ShopInfo
	17, // 9: Pb.Base_Player_PlayerData.InboxInfo:type_name -> Pb.Base_Inbox_InboxInfo
	18, // 10: Pb.Base_Player_PlayerData.HeroCardInfo:type_name -> Pb.Base_HeroCard_HeroCardInfo
	19, // 11: Pb.Base_Player_PlayerData.TaskInfo:type_name -> Pb.Base_Task_TaskInfo
	20, // 12: Pb.Base_Player_PlayerData.CupTaskInfo:type_name -> Pb.Base_Task_CupTaskInfo
	21, // 13: Pb.Base_Player_PlayerData.PassCheckInfo:type_name -> Pb.Base_PassCheck_PassCheckInfo
	22, // 14: Pb.Base_Player_PlayerData.GuideInfo:type_name -> Pb.Base_Guide_GuideInfo
	23, // 15: Pb.Base_Player_PlayerData.Match3Info:type_name -> Pb.Base_Match3_Match3Info
	7,  // 16: Pb.Net_Player_UpdateMoneyInfoRet.MoneyInfo:type_name -> Pb.Base_Player_MoneyInfo
	12, // 17: Pb.Net_Player_PlayerUpdatesInfoRet.PlayerMarkList:type_name -> Pb.Net_Player_PlayerUpdatesInfoRet.PlayerMarkListEntry
	18, // 18: Pb.Net_Player_PlayerUpdatesInfoRet.HeroCardInfo:type_name -> Pb.Base_HeroCard_HeroCardInfo
	15, // 19: Pb.Net_Player_PlayerUpdatesInfoRet.ActivityInfo:type_name -> Pb.Base_Activity_ActivityInfo
	19, // 20: Pb.Net_Player_PlayerUpdatesInfoRet.TaskInfo:type_name -> Pb.Base_Task_TaskInfo
	6,  // 21: Pb.Net_Player_PlayerUpdatesInfoRet.PlayerMarkListEntry.value:type_name -> Pb.Base_Player_PlayerMark
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_Net_Player_proto_init() }
func file_Net_Player_proto_init() {
	if File_Net_Player_proto != nil {
		return
	}
	file_Net_Backpack_proto_init()
	file_Net_Shop_proto_init()
	file_Net_Activity_proto_init()
	file_Net_Task_proto_init()
	file_Net_PassCheck_proto_init()
	file_Net_Inbox_proto_init()
	file_Net_Guide_proto_init()
	file_Net_Match3_proto_init()
	file_Net_HeroCard_proto_init()
	file_Net_Vip_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_Net_Player_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Player_PlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Player_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Player_PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Player_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Player_LoginBonusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Player_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Player_ThemeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Player_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Player_DailyBonusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Player_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Player_PlayerMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Player_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base_Player_MoneyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Player_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Player_UpdateMoneyInfoRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Player_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Player_PlayerUpdatesInfoRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Player_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Player_ChangeNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Net_Player_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Player_ChangeNameRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Net_Player_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Net_Player_proto_goTypes,
		DependencyIndexes: file_Net_Player_proto_depIdxs,
		EnumInfos:         file_Net_Player_proto_enumTypes,
		MessageInfos:      file_Net_Player_proto_msgTypes,
	}.Build()
	File_Net_Player_proto = out.File
	file_Net_Player_proto_rawDesc = nil
	file_Net_Player_proto_goTypes = nil
	file_Net_Player_proto_depIdxs = nil
}
